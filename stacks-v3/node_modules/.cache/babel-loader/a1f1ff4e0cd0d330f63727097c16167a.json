{"ast":null,"code":"import _classCallCheck from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/src/Components/ViewStacks.js\";\n\nimport React, { Component } from 'react';\nimport Stacks from './Stacks';\n/**************\nHolds the Daily Stacks View\n\n\nTO DO\n\n- 'add' button\n  - add spots where applicable (stacks, habits, friends)\n  - cancel\n\n- display stacks and habits\n\n- display empty stacks component if no stacks\n\n**************/\n//to draw from :\n\naddHabit = function addHabit(itemPos, stackID) {\n  //recognize which was clicked\n  //input module (toggle off touchspots)\n  //submit to right place\n  //console.log(\"item pos is : \" + itemPos + \" and stackID is : \" + stackID);\n  _this.setState({\n    inputtingNewHabit: true\n  }); //but this should only be taken once form is filled out.\n\n\n  var cue = _this.state.newHabit.cue;\n  var action = _this.state.newHabit.action;\n  var newStack = _this.state.stacks;\n  newStack[stackID].stack.habits.splice(itemPos, 0, {\n    cue: cue,\n    action: action,\n    result: \"blank\",\n    fn: \"\"\n  });\n\n  _this.setState({\n    stacks: newStack\n  }); // this.cancelNew();\n\n};\n\nlogHabits = function logHabits(itemPos, stackID) {\n  var h = _this.state.stacks[stackID].stack.habits;\n  var newH = h.map(function (habit, i) {\n    if (i <= itemPos) {\n      habit.result = \"success\";\n    } else {\n      habit.result = \"failure\";\n    }\n  });\n\n  if (itemPos === h.length - 1) {\n    console.log(\"SUCCESS\");\n  }\n\n  _this.setState({\n    h: newH\n  });\n};\n\nvar View_Stacks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(View_Stacks, _Component);\n\n  function View_Stacks() {\n    _classCallCheck(this, View_Stacks);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(View_Stacks).apply(this, arguments));\n  }\n\n  _createClass(View_Stacks, [{\n    key: \"render\",\n    value: function render() {\n      /**************\n      Logic\n       - Check if there are any stacks available in state\n        - no? emptyStacks message\n        - yes? display\n       **************/\n      var areStacksToDisplay = false;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Stacks View \"));\n    }\n  }]);\n\n  return View_Stacks;\n}(Component);\n\nexport default View_Stacks;","map":{"version":3,"sources":["/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/src/Components/ViewStacks.js"],"names":["React","Component","Stacks","addHabit","itemPos","stackID","setState","inputtingNewHabit","cue","state","newHabit","action","newStack","stacks","stack","habits","splice","result","fn","logHabits","h","newH","map","habit","i","length","console","log","View_Stacks","areStacksToDisplay"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;;;;;;;;;;;;;;;AAqBA;;AACAC,QAAQ,GAAG,kBAACC,OAAD,EAAUC,OAAV,EAAsB;AAC/B;AACA;AACA;AAEA;AAEA,EAAA,KAAI,CAACC,QAAL,CAAc;AAACC,IAAAA,iBAAiB,EAAC;AAAnB,GAAd,EAP+B,CAU/B;;;AAEA,MAAIC,GAAG,GAAG,KAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBF,GAA9B;AACA,MAAIG,MAAM,GAAG,KAAI,CAACF,KAAL,CAAWC,QAAX,CAAoBC,MAAjC;AAIA,MAAIC,QAAQ,GAAG,KAAI,CAACH,KAAL,CAAWI,MAA1B;AACAD,EAAAA,QAAQ,CAACP,OAAD,CAAR,CAAkBS,KAAlB,CAAwBC,MAAxB,CAA+BC,MAA/B,CAAsCZ,OAAtC,EAA+C,CAA/C,EAAkD;AAACI,IAAAA,GAAG,EAACA,GAAL;AAAUG,IAAAA,MAAM,EAACA,MAAjB;AAAyBM,IAAAA,MAAM,EAAC,OAAhC;AAAyCC,IAAAA,EAAE,EAAC;AAA5C,GAAlD;;AACA,EAAA,KAAI,CAACZ,QAAL,CAAc;AAACO,IAAAA,MAAM,EAAGD;AAAV,GAAd,EAnB+B,CAoB/B;;AACD,CArBD;;AAsBAO,SAAS,GAAG,mBAACf,OAAD,EAAUC,OAAV,EAAsB;AAEhC,MAAIe,CAAC,GAAG,KAAI,CAACX,KAAL,CAAWI,MAAX,CAAkBR,OAAlB,EAA2BS,KAA3B,CAAiCC,MAAzC;AAEA,MAAIM,IAAI,GAAGD,CAAC,CAACE,GAAF,CAAM,UAACC,KAAD,EAAQC,CAAR,EAAc;AAC7B,QAAIA,CAAC,IAAIpB,OAAT,EAAiB;AACfmB,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACD,KAFD,MAGK;AACHM,MAAAA,KAAK,CAACN,MAAN,GAAc,SAAd;AACD;AACF,GAPU,CAAX;;AASA,MAAIb,OAAO,KAAKgB,CAAC,CAACK,MAAF,GAAS,CAAzB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAED,EAAA,KAAI,CAACrB,QAAL,CAAc;AAACc,IAAAA,CAAC,EAACC;AAAH,GAAd;AAED,CAnBD;;IA0BMO,W;;;;;;;;;;;;;6BACK;AAEP;;;;;;AASA,UAAIC,kBAAkB,GAAG,KAAzB;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF;AAKD;;;;EAnBuB5B,S;;AAwB1B,eAAe2B,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport Stacks from './Stacks';\n\n/**************\nHolds the Daily Stacks View\n\n\nTO DO\n\n- 'add' button\n  - add spots where applicable (stacks, habits, friends)\n  - cancel\n\n- display stacks and habits\n\n- display empty stacks component if no stacks\n\n**************/\n\n\n\n\n\n\n//to draw from :\naddHabit = (itemPos, stackID) => {\n  //recognize which was clicked\n  //input module (toggle off touchspots)\n  //submit to right place\n\n  //console.log(\"item pos is : \" + itemPos + \" and stackID is : \" + stackID);\n\n  this.setState({inputtingNewHabit:true});\n\n\n  //but this should only be taken once form is filled out.\n\n  let cue = this.state.newHabit.cue;\n  let action = this.state.newHabit.action;\n\n\n\n  let newStack = this.state.stacks;\n  newStack[stackID].stack.habits.splice(itemPos, 0, {cue:cue, action:action, result:\"blank\", fn:\"\"});\n  this.setState({stacks : newStack});\n  // this.cancelNew();\n}\nlogHabits = (itemPos, stackID) => {\n\n  let h = this.state.stacks[stackID].stack.habits;\n\n  let newH = h.map((habit, i) => {\n    if (i <= itemPos){\n      habit.result = \"success\";\n    }\n    else {\n      habit.result =\"failure\";\n    }\n  });\n\n  if (itemPos === h.length-1){\n    console.log(\"SUCCESS\");\n  }\n\n  this.setState({h:newH});\n\n}\n\n\n\n\n\n\nclass View_Stacks extends Component {\n  render() {\n\n    /**************\n    Logic\n\n    - Check if there are any stacks available in state\n      - no? emptyStacks message\n      - yes? display\n\n    **************/\n\n    let areStacksToDisplay = false;\n\n    return (\n      <div>\n        <p>Stacks View </p>\n      </div>\n    );\n  }\n}\n\n\n\nexport default View_Stacks;\n"]},"metadata":{},"sourceType":"module"}