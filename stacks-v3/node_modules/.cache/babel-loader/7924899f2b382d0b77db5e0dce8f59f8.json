{"ast":null,"code":"import _classCallCheck from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/src/Components/ViewStacks.js\";\nimport React, { Component } from 'react';\nimport Stack from './Stack';\nimport '../App.css';\nimport { sortableContainer, sortableElement, arrayMove } from 'react-sortable-hoc';\nimport AnimateHeight from 'react-animate-height';\n/**************\nHolds the Daily Stacks View\n\n\nTO DO\n\n- 'add' button\n  - addOptions\n  - cancel\n\n- display stacks and habits\n\n- display empty stacks component if no stacks\n\n**************/\n\nvar View_Stacks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(View_Stacks, _Component);\n\n  function View_Stacks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, View_Stacks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(View_Stacks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.displayStacks = function (stacks) {\n      if (stacks.length !== 0) {\n        var stacksInJSX = [];\n        var visiblility = null;\n        stacks.forEach(function (stack, i) {\n          stacksInJSX.push(React.createElement(Stack, {\n            name: stack.name,\n            key: i,\n            id: i,\n            height: stack.height,\n            streak: stack.streak,\n            habits: stack.habits,\n            toggleStack: _this.props.toggleStack,\n            onSortEnd: _this.props.onSortEnd,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }));\n        });\n        return stacksInJSX;\n      } else {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"Tap + to add stacks, habits, & friends\");\n      }\n    };\n\n    _this.addHabit = function (itemPos, stackID) {\n      //recognize which was clicked\n      //input module (toggle off touchspots)\n      //submit to right place\n      //console.log(\"item pos is : \" + itemPos + \" and stackID is : \" + stackID);\n      _this.setState({\n        inputtingNewHabit: true\n      }); //but this should only be taken once form is filled out.\n\n\n      var cue = _this.state.newHabit.cue;\n      var action = _this.state.newHabit.action;\n      var newStack = _this.state.stacks;\n      newStack[stackID].stack.habits.splice(itemPos, 0, {\n        cue: cue,\n        action: action,\n        result: \"blank\",\n        fn: \"\"\n      });\n\n      _this.setState({\n        stacks: newStack\n      }); // this.cancelNew();\n\n    };\n\n    _this.logHabits = function (itemPos, stackID) {\n      var h = _this.state.stacks[stackID].stack.habits;\n      var newH = h.map(function (habit, i) {\n        if (i <= itemPos) {\n          habit.result = \"success\";\n        } else {\n          habit.result = \"failure\";\n        }\n      });\n\n      if (itemPos === h.length - 1) {\n        console.log(\"SUCCESS\");\n      }\n\n      _this.setState({\n        h: newH\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(View_Stacks, [{\n    key: \"render\",\n    value: function render() {\n      /**************\n      Logic\n      **************/\n      var stacksToDisplay = this.displayStacks(this.props.stacks);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"habitsTopBar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Dec. 6th\"), React.createElement(\"button\", {\n        className: \"add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), stacksToDisplay);\n    }\n  }]);\n\n  return View_Stacks;\n}(Component);\n\nexport default View_Stacks;","map":{"version":3,"sources":["/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/src/Components/ViewStacks.js"],"names":["React","Component","Stack","sortableContainer","sortableElement","arrayMove","AnimateHeight","View_Stacks","displayStacks","stacks","length","stacksInJSX","visiblility","forEach","stack","i","push","name","height","streak","habits","props","toggleStack","onSortEnd","addHabit","itemPos","stackID","setState","inputtingNewHabit","cue","state","newHabit","action","newStack","splice","result","fn","logHabits","h","newH","map","habit","console","log","stacksToDisplay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Stack from './Stack';\nimport '../App.css';\nimport {sortableContainer, sortableElement, arrayMove} from 'react-sortable-hoc';\nimport AnimateHeight from 'react-animate-height';\n\n\n/**************\nHolds the Daily Stacks View\n\n\nTO DO\n\n- 'add' button\n  - addOptions\n  - cancel\n\n- display stacks and habits\n\n- display empty stacks component if no stacks\n\n**************/\n\n\nclass View_Stacks extends Component {\n\n\n\n\n  displayStacks = (stacks) => {\n\n    if (stacks.length !== 0) {\n\n      let stacksInJSX = [];\n      let visiblility = null;\n\n      stacks.forEach((stack, i) => {\n        stacksInJSX.push(\n          <Stack\n            name={stack.name}\n            key={i}\n            id={i}\n            height={stack.height}\n            streak={stack.streak}\n            habits={stack.habits}\n            toggleStack={this.props.toggleStack}\n            onSortEnd={this.props.onSortEnd}\n            />\n        )\n      });\n      return stacksInJSX;\n    }\n    else {\n      return <p>Tap + to add stacks, habits, & friends</p>\n    }\n  }\n\n\n  //to draw from :\n  addHabit = (itemPos, stackID) => {\n    //recognize which was clicked\n    //input module (toggle off touchspots)\n    //submit to right place\n\n    //console.log(\"item pos is : \" + itemPos + \" and stackID is : \" + stackID);\n\n    this.setState({inputtingNewHabit:true});\n\n\n    //but this should only be taken once form is filled out.\n\n    let cue = this.state.newHabit.cue;\n    let action = this.state.newHabit.action;\n\n\n\n    let newStack = this.state.stacks;\n    newStack[stackID].stack.habits.splice(itemPos, 0, {cue:cue, action:action, result:\"blank\", fn:\"\"});\n    this.setState({stacks : newStack});\n    // this.cancelNew();\n  }\n  logHabits = (itemPos, stackID) => {\n\n    let h = this.state.stacks[stackID].stack.habits;\n\n    let newH = h.map((habit, i) => {\n      if (i <= itemPos){\n        habit.result = \"success\";\n      }\n      else {\n        habit.result =\"failure\";\n      }\n    });\n\n    if (itemPos === h.length-1){\n      console.log(\"SUCCESS\");\n    }\n\n    this.setState({h:newH});\n\n  }\n\n\n\n\n  render() {\n\n    /**************\n    Logic\n    **************/\n\n    let stacksToDisplay = this.displayStacks(this.props.stacks);\n\n\n    return (\n      <>\n        <div className=\"habitsTopBar\">\n          <p className=\"title\">Dec. 6th</p>\n          <button className=\"add\"></button>\n        </div>\n        {stacksToDisplay}\n      </>\n    );\n  }\n}\n\n\n\nexport default View_Stacks;\n"]},"metadata":{},"sourceType":"module"}