{"ast":null,"code":"var _jsxFileName = \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/src/Components/Stack.js\";\nimport React from 'react';\nimport '../App.css';\nimport Habit from './Habit';\nimport AnimateHeight from 'react-animate-height';\nimport { SortableContainer, SortableElement, arrayMove } from 'react-sortable-hoc';\n/**************\nStack Component\n\n\n**************/\n\nfunction displayHabits(stack) {\n  if (stack.length !== 0) {\n    var habitsInJSX = [];\n    stack.forEach(function (habit, i) {\n      habitsInJSX.push(React.createElement(Habit, {\n        action: habit.action,\n        cue: habit.cue,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }));\n    });\n    return habitsInJSX;\n  } else {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Tap + to add a habit\");\n  }\n} //so I have habitsInJSX which is an array. it's basically 'items'\n//but items needs to be the same content as what i s\n\n\nvar SortableItem = SortableElement(function (_ref) {\n  var value = _ref.value;\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Habit, {\n    cue: value.cue,\n    action: value.action,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n});\nvar SortableList = SortableContainer(function (_ref2) {\n  var items = _ref2.items;\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, items.map(function (value, index) {\n    return React.createElement(SortableItem, {\n      key: \"item-\".concat(index),\n      index: index,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }));\n}); // <div className=\"stack\">\n//   <div className=\"stackHeader\">\n//     <div className=\"toggle\" onClick={() => props.toggleStack(props.id)}>\n//       <div className=\"bar\"></div>\n//       <div className=\"bar\"></div>\n//       <div className=\"bar\"></div>\n//     </div>\n//     <h3 className=\"stackName\">{props.name}!</h3>\n//   </div>\n//   <AnimateHeight\n//   duration={ 500 }\n//   key={props.id}\n//   height={ props.height }\n//   >\n//     <div className=\"stackBody\">\n//       <SortableList items={props.habits} onSortEnd={props.onSortEnd}  />\n//     </div>\n//   </AnimateHeight >\n//   <div className=\"stackBottom\">\n//     <div className=\"stackLine\"></div>\n//     <p className=\"streakName\">Streak</p>\n//     <p className=\"streakCount\">{props.streak}</p>\n//   </div>\n// </div>\n\nfunction Stack(props) {\n  return React.createElement(React.Fragment, {\n    key: props.stacksIndex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, props.stacksInfo[props.stacksIndex].name), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, props.stacksItems.map(function (item, i) {\n    return React.createElement(Habit, {\n      key: i,\n      value: item,\n      index: i,\n      collection: props.stacksIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  })));\n}\n\nexport default Stack;","map":{"version":3,"sources":["/Users/benreimer/Google Drive/Year4Sem2/IXDS2/Develop/stacks-v3/src/Components/Stack.js"],"names":["React","Habit","AnimateHeight","SortableContainer","SortableElement","arrayMove","displayHabits","stack","length","habitsInJSX","forEach","habit","i","push","action","cue","SortableItem","value","SortableList","items","map","index","Stack","props","stacksIndex","stacksInfo","name","stacksItems","item"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAAQC,iBAAR,EAA2BC,eAA3B,EAA4CC,SAA5C,QAA4D,oBAA5D;AAGA;;;;;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAE3B,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,QAAIC,WAAW,GAAG,EAAlB;AACAF,IAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,KAAD,EAAQC,CAAR,EAAc;AAC1BH,MAAAA,WAAW,CAACI,IAAZ,CACE,oBAAC,KAAD;AACE,QAAA,MAAM,EAAEF,KAAK,CAACG,MADhB;AAEE,QAAA,GAAG,EAAEH,KAAK,CAACI,GAFb;AAGE,QAAA,GAAG,EAAEH,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD,KAPD;AAQA,WAAOH,WAAP;AACD,GAXD,MAYK;AACH,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;AACF,C,CAGD;AACA;;;AAGA,IAAMO,YAAY,GAAGZ,eAAe,CAClC;AAAA,MAAEa,KAAF,QAAEA,KAAF;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAK,CAACF,GAAlB;AAAuB,IAAA,MAAM,EAAEE,KAAK,CAACH,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAAA,CADkC,CAApC;AAQA,IAAMI,YAAY,GAAGf,iBAAiB,CAAC,iBAAa;AAAA,MAAXgB,KAAW,SAAXA,KAAW;AAClD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACC,GAAN,CAAU,UAACH,KAAD,EAAQI,KAAR;AAAA,WACT,oBAAC,YAAD;AAAc,MAAA,GAAG,iBAAUA,KAAV,CAAjB;AAAoC,MAAA,KAAK,EAAEA,KAA3C;AAAkD,MAAA,KAAK,EAAEJ,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CADH,CADF;AAOD,CARqC,CAAtC,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASK,KAAT,CAAeC,KAAf,EAAqB;AAEnB,SAGE,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAEA,KAAK,CAACC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASD,KAAK,CAACE,UAAN,CAAiBF,KAAK,CAACC,WAAvB,EAAoCE,IAA7C,CADE,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACI,WAAN,CAAkBP,GAAlB,CAAsB,UAACQ,IAAD,EAAOhB,CAAP;AAAA,WACrB,oBAAC,KAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,KAAK,EAAEgB,IAFT;AAGE,MAAA,KAAK,EAAEhB,CAHT;AAIE,MAAA,UAAU,EAAEW,KAAK,CAACC,WAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADqB;AAAA,GAAtB,CADH,CAFE,CAHF;AAiBD;;AAED,eAAeF,KAAf","sourcesContent":["\nimport React from 'react';\nimport '../App.css';\nimport Habit from './Habit';\nimport AnimateHeight from 'react-animate-height';\nimport {SortableContainer, SortableElement, arrayMove} from 'react-sortable-hoc';\n\n\n/**************\nStack Component\n\n\n**************/\n\nfunction displayHabits(stack){\n\n  if (stack.length !== 0) {\n    let habitsInJSX = [];\n    stack.forEach((habit, i) => {\n      habitsInJSX.push(\n        <Habit\n          action={habit.action}\n          cue={habit.cue}\n          key={i}/>\n      )\n    });\n    return habitsInJSX;\n  }\n  else {\n    return <p>Tap + to add a habit</p>\n  }\n}\n\n\n//so I have habitsInJSX which is an array. it's basically 'items'\n//but items needs to be the same content as what i s\n\n\nconst SortableItem = SortableElement(\n  ({value}) => (\n    <li>\n      <Habit cue={value.cue} action={value.action}/>\n    </li>\n  )\n);\n\nconst SortableList = SortableContainer(({items}) => {\n  return (\n    <ul>\n      {items.map((value, index) => (\n        <SortableItem key={`item-${index}`} index={index} value={value} />\n      ))}\n    </ul>\n  );\n});\n\n\n// <div className=\"stack\">\n//   <div className=\"stackHeader\">\n//     <div className=\"toggle\" onClick={() => props.toggleStack(props.id)}>\n//       <div className=\"bar\"></div>\n//       <div className=\"bar\"></div>\n//       <div className=\"bar\"></div>\n//     </div>\n//     <h3 className=\"stackName\">{props.name}!</h3>\n//   </div>\n//   <AnimateHeight\n//   duration={ 500 }\n//   key={props.id}\n//   height={ props.height }\n//   >\n//     <div className=\"stackBody\">\n//       <SortableList items={props.habits} onSortEnd={props.onSortEnd}  />\n//     </div>\n//   </AnimateHeight >\n//   <div className=\"stackBottom\">\n//     <div className=\"stackLine\"></div>\n//     <p className=\"streakName\">Streak</p>\n//     <p className=\"streakCount\">{props.streak}</p>\n//   </div>\n// </div>\n\nfunction Stack(props){\n\n  return (\n\n\n    <React.Fragment key={props.stacksIndex}>\n  <strong>{props.stacksInfo[props.stacksIndex].name}</strong>\n  <ul>\n    {props.stacksItems.map((item, i) => (\n      <Habit\n        key={i}\n        value={item}\n        index={i}\n        collection={props.stacksIndex}\n      />\n    ))}\n  </ul>\n</React.Fragment>\n  )\n}\n\nexport default Stack;\n"]},"metadata":{},"sourceType":"module"}