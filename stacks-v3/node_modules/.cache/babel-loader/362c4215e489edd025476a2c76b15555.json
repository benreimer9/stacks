{"ast":null,"code":"import _objectSpread from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/benreimer/Develop/stacks/stacks-v3/src/App.js\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  position:absolute;\\n  width:100%;\\n  bottom: 70px;\\n  z-index:10;\\n  padding-left: 5px;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  h3, h4 {\\n    font-family : 'Poppins';\\n    font-weight : 700;\\n  }\\n  body {\\n    font-family: 'Roboto';\\n    font-weight: 400;\\n    height: 100%;\\n  }\\n  html {\\n    font-size: 16px;\\n    overflow: scroll;\\n    overflow-x: hidden;\\n    height: 100%;\\n  }\\n  ::-webkit-scrollbar {\\n    width: 0px;  /* remove scrollbar space */\\n    background: transparent;  /* optional: just make scrollbar invisible */\\n  }\\n  button {\\n      display: block;\\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\\n      border-radius: 4px;\\n      height: 30px;\\n      // width:85px;\\n      padding-top: 4px;\\n      padding-left: 13px;\\n      padding-right: 13px;\\n      font-family: Poppins;\\n      font-weight: 500;\\n      font-size: 1rem;\\n      color: #3D3D3D;\\n      text-align: center;\\n      transition: width .2s;\\n      -webkit-touch-callout: none; /* iOS Safari */\\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\\n      -khtml-user-select: none; /* Konqueror */\\n      -moz-user-select: none; /* Firefox */\\n      -ms-user-select: none; /* Internet Explorer/Edge */\\n       user-select: none;\\n  }\\n  button:focus{\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position:relative;\\n  width:100%;\\n  height: 100%;\\n  margin: 0 auto;\\n  display: block;\\n  padding-top: 100px;\\n\\n  @media(min-width:769px){\\n    .App {\\n      margin-top: 40px;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Raven from 'raven-js';\nimport { sentry_url, logException } from './config.js';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styled, { createGlobalStyle } from 'styled-components';\n/**************\nTO DO\n\n\nremove previous serviceworker or clear it's cache atleast when I push an updated version of the app\n^ progress is currently logged in localStorage so it's cool.\n\nComponents\n\n- 'Edit' button\nwhen edit is active either completly stop loghabit or atleast the edit section of it.\n\n\n\n\n- 'Miss' management component\n\n- stack bar color when all complete\n- Add days of the week to habits\n- Learn push messaging and add reminders to habits (or reminders to your stack)\n\n- make the android PWA download pop-up work\n- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n- animation for successes and misses\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nvar AppStyled = styled.div(_templateObject());\nvar Typography = createGlobalStyle(_templateObject2());\nvar GlobalStyles = createGlobalStyle(_templateObject3());\nvar DebugLog = styled.div(_templateObject4()); //\n\nRaven.config(sentry_url, {\n  tags: {\n    git_commit: 'as09d8f09'\n  }\n}).install(); // logException(new Error('Incomplete Data!'), {\n//   email: 'benreimer9@gmail.com'\n// });\n//\n// Raven.showReportDialog();\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stacks: [\n        /*[ //stack 1\n          {\n            action : \"Meditate 15mins\",\n            cue: \"7:00am\",\n            result: \"neutral\",\n            log : {},\n          },\n        ],*/\n      ],\n      stacksInfo: [// { name : \"Routine One\", streak: 0, todayStreakChange:0, height : \"auto\", },\n      ],\n      date: {\n        lastLoggedDate: null,\n        // day/month/year\n        visualDate: null,\n        isFirstDayOfUse: true\n      },\n      activeStates: {\n        addModeIsActive: false,\n        addHabitModuleIsActive: false,\n        addStackModuleIsActive: false,\n        editModeIsActive: false\n      },\n      building: {\n        stackBeingAddedTo: 0,\n        //defaults to first stack\n        populateFromStateIsComplete: false\n      },\n      debug: {\n        debugMode: false,\n        addDay: false,\n        addCounter: 0,\n        text: \" __ \",\n        textCounter: 0\n      }\n    };\n\n    _this.habitResultHandler = function (result) {\n      switch (result) {\n        case \"neutral\":\n          return \"complete\";\n\n        case \"complete\":\n          return \"miss\";\n\n        case \"miss\":\n          return \"skip\";\n\n        case \"skip\":\n          return \"neutral\";\n\n        default:\n          return \"neutral\";\n      }\n    };\n\n    _this.habitEasyComplete = function (itemId, stackId) {\n      //turn earlier habits in stack into 'complete' if they're neutral\n      var stack = _toConsumableArray(_this.state.stacks[stackId]);\n\n      for (var i = 0; i < stack.length; i++) {\n        if (itemId > i && stack[i].result === \"neutral\") {\n          _this.logHabit(i, stackId);\n        }\n      }\n    };\n\n    _this.logHabit = function (itemId, stackId) {\n      var stacks = _toConsumableArray(_this.state.stacks); //leave if no habits in stack or in edit mode\n\n\n      if (stacks[stackId].length === 0) {\n        return;\n      }\n\n      if (_this.state.activeStates.editModeIsActive === true) {\n        return;\n      }\n\n      var habitToUpdate = stacks[stackId][itemId];\n      var result = habitToUpdate.result; //neutral, complete, miss, etc.\n\n      var updatedResult = _this.habitResultHandler(result); //toggle to next result\n\n\n      var shouldUpdateStreakCounter = false;\n\n      if (updatedResult === \"complete\") {\n        _this.habitEasyComplete(itemId, stackId);\n      } //if last habit in a stack is logged with any result, update streakcounter\n\n\n      var lastHabitInStack = stacks[stackId].length - 1;\n\n      if (stacks[stackId][lastHabitInStack].result !== null) {\n        shouldUpdateStreakCounter = true;\n      }\n\n      habitToUpdate.result = updatedResult; //add habit to the habit's log\n\n      var today = _this.state.date.lastLoggedDate;\n      habitToUpdate.log[today] = updatedResult;\n\n      _this.setState({\n        stacks: stacks\n      }, function stateUpdateComplete() {\n        this.updateLocaLStorage();\n\n        if (shouldUpdateStreakCounter) {\n          this.updateStreakCounter(stackId);\n        }\n\n        ;\n      });\n    };\n\n    _this.addHabit = function (stackId) {\n      var activeStates = _objectSpread({}, _this.state.activeStates);\n\n      var building = _objectSpread({}, _this.state.building); //toggle off editMode if it's on\n\n\n      var editModeIsActive = activeStates.editModeIsActive;\n\n      if (editModeIsActive) {\n        activeStates.editModeIsActive = false;\n      }\n\n      activeStates.addHabitModuleIsActive = true;\n      building.stackBeingAddedTo = stackId;\n\n      _this.setState({\n        activeStates: activeStates\n      });\n\n      _this.setState({\n        building: building\n      });\n    };\n\n    _this.addStack = function (stackId) {\n      var activeStates = _objectSpread({}, _this.state.activeStates);\n\n      var building = _objectSpread({}, _this.state.building);\n\n      activeStates.addStackModuleIsActive = true;\n      building.stackBeingAddedTo = stackId;\n\n      _this.setState({\n        activeStates: activeStates\n      });\n\n      _this.setState({\n        building: building\n      });\n    };\n\n    _this.checkForNullHabits = function () {\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks.forEach(function (stack, stackId) {\n        stack.forEach(function (habit, habitId) {\n          if (habit === null) {\n            _this.deleteHabit(habitId, stackId);\n          }\n        });\n      });\n    };\n\n    _this.addHabitFormSubmission = function (newHabit) {\n      var stackId = _this.state.building.stackBeingAddedTo;\n\n      var newStack = _toConsumableArray(_this.state.stacks);\n\n      var action = newHabit.action;\n      var cue = newHabit.cue;\n      newStack[stackId].push({\n        action: action,\n        cue: cue,\n        result: \"neutral\",\n        log: {}\n      });\n\n      var building = _objectSpread({}, _this.state.building);\n\n      building.stackBeingAddedTo = 0; //defaults to first stack\n\n      _this.setState({\n        building: building\n      });\n\n      _this.setState({\n        stacks: newStack\n      });\n\n      _this.updateLocaLStorage();\n\n      _this.cancelActiveModules();\n\n      _this.toggleAddMode();\n    };\n\n    _this.addStackFormSubmission = function (newStack) {\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      stacksInfo.push({\n        name: newStack.stackName,\n        streak: 0,\n        todayStreakChange: 0,\n        height: \"auto\"\n      });\n      stacks.push([]);\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n\n      _this.setState({\n        stacks: stacks\n      });\n\n      _this.cancelActiveModules();\n\n      _this.toggleAddMode();\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.deleteHabit = function (habitId, stackId) {\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks[stackId].splice(habitId, 1);\n\n      _this.setState({\n        stacks: stacks\n      });\n    };\n\n    _this.updateStreakCounter = function (stackId) {\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      var finalResult = null;\n      var streakChange = stacksInfo[stackId].todayStreakChange;\n\n      var stack = _toConsumableArray(_this.state.stacks[stackId]);\n\n      for (var i = 0; i < stack.length; i++) {\n        if (stack[i].result === \"complete\" && finalResult !== \"failed\" && finalResult !== \"incomplete\") {\n          finalResult = \"completed\";\n        } else if (stack[i].result === \"miss\") {\n          finalResult = \"failed\";\n        } else if (stack[i].result === \"skip\" && finalResult !== \"failed\" && finalResult !== \"incomplete\") {\n          finalResult = \"completed\";\n        } else if (stack[i].result === \"neutral\") {\n          //catch any neutrals -- this means logging for the day isn't done yet\n          finalResult = \"incomplete\";\n        }\n      }\n\n      if (finalResult === \"failed\") {\n        if (streakChange !== -1) {\n          //only remove 1 if it hasn't already today\n          if (stacksInfo[stackId].streak !== 0) {\n            //don't let it go into negatives when streak is at 0\n            stacksInfo[stackId].streak--;\n            streakChange = -1;\n          }\n        }\n      }\n\n      if (finalResult === \"completed\") {\n        if (streakChange !== 1) {\n          stacksInfo[stackId].streak++;\n          streakChange = 1;\n        }\n      }\n\n      stacksInfo[stackId].todayStreakChange = streakChange;\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n    };\n\n    _this.debugStacksInfo = function () {\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      console.log(\"in debug stacksInfo is: \", stacksInfo);\n    };\n\n    _this.newDayUpdateStreakCounter = function () {\n      //check for any incompletes from yesterday and mark as failed\n      //this should run right before the resetForNewDay() does\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      var thereAreNeutralHabits = false;\n      console.log(\"stacksInfo was : \", stacksInfo);\n      stacks.map(function (stack, index) {\n        for (var i = 0; i < stack.length; i++) {\n          if (stack[i].result === \"neutral\") {\n            //catch any neutrals -- this means logging for the day isn't done yet\n            thereAreNeutralHabits = true;\n          }\n        }\n\n        if (thereAreNeutralHabits) {\n          if (stacksInfo[index].todayStreakChange !== -1) {\n            //only remove 1 if it hasn't already today\n            if (stacksInfo[index].streak !== 0) {\n              //don't let it go into negatives when streak is at 0\n              stacksInfo[index].streak--;\n              stacksInfo[index].todayStreakChange = -1;\n            }\n          }\n        }\n      });\n      console.log(\"stacksInfo has become : \", stacksInfo);\n      return;\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n    };\n\n    _this.editMode = function () {\n      console.log(\"edit mode active\");\n    };\n\n    _this.toggleStack = function (id) {\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      var toggleStack = stacksInfo[id];\n      var newStack = toggleStack; //note : if you change -10 also change it in 'Burger' styled component in Stack.js\n\n      newStack.height = toggleStack.height === -10 ? 'auto' : -10;\n      stacksInfo[id] = newStack;\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n    };\n\n    _this.toggleAddMode = function () {\n      var activeState = _this.state.activeStates;\n      activeState.addModeIsActive = !activeState.addModeIsActive;\n\n      _this.setState({\n        activeState: activeState\n      });\n    };\n\n    _this.toggleEditMode = function () {\n      var activeState = _this.state.activeStates;\n      activeState.editModeIsActive = !activeState.editModeIsActive;\n\n      _this.setState({\n        activeState: activeState\n      });\n    };\n\n    _this.cancelActiveModules = function () {\n      var activeStates = _objectSpread({}, _this.state.activeStates);\n\n      activeStates.addHabitModuleIsActive = false;\n      activeStates.addStackModuleIsActive = false;\n\n      _this.setState({\n        activeStates: activeStates\n      });\n    };\n\n    _this.onSortEnd = function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex,\n          collection = _ref.collection;\n\n      _this.setState(function (_ref2) {\n        var stacks = _ref2.stacks;\n\n        var newstacks = _toConsumableArray(stacks);\n\n        newstacks[collection] = arrayMove(stacks[collection], oldIndex, newIndex);\n        return {\n          stacks: newstacks\n        };\n      });\n    };\n\n    _this.setInterval = function () {\n      //called when populateStateFromStorage is complete on component mount\n      _this.interval = setInterval(function () {\n        return _this.dayController();\n      }, 1000);\n    };\n\n    _this.visualDate = function (day, month) {\n      var today = null;\n\n      switch (month) {\n        case '0':\n          today = \"Jan \" + day;\n          break;\n\n        case '1':\n          today = \"Feb \" + day;\n          break;\n\n        case '2':\n          today = \"March \" + day;\n          break;\n\n        case '3':\n          today = \"April \" + day;\n          break;\n\n        case '4':\n          today = \"May \" + day;\n          break;\n\n        case '5':\n          today = \"June \" + day;\n          break;\n\n        case '6':\n          today = \"July \" + day;\n          break;\n\n        case '7':\n          today = \"Aug \" + day;\n          break;\n\n        case '8':\n          today = \"Sept \" + day;\n          break;\n\n        case '9':\n          today = \"Oct \" + day;\n          break;\n\n        case '10':\n          today = \"Nov \" + day;\n          break;\n\n        case '11':\n          today = \"Dec \" + day;\n          break;\n      }\n\n      return today;\n    };\n\n    _this.dayController = function () {\n      //get the day\n      var fullDate = new Date();\n      var thisDay = fullDate.getDate().toString();\n      var thisMonth = fullDate.getMonth().toString();\n      var thisYear = fullDate.getFullYear().toString(); //build dates\n\n      var currentDate = thisDay + \"/\" + thisMonth + \"/\" + thisYear;\n\n      var visDate = _this.visualDate(thisDay, thisMonth); //check if is new day\n\n\n      if (_this.isNewDay(currentDate, visDate)) {\n        _this.newDayUpdateStreakCounter();\n\n        _this.resetForNewDay();\n      }\n    };\n\n    _this.isNewDay = function (currentDate, visDate) {\n      var date = _objectSpread({}, _this.state.date);\n\n      var lastLoggedDate = date.lastLoggedDate; //Debug : force add a day for testing\n      // if (this.state.debug.debugMode){\n      //\n      //   thisDay = fullDate.getDate() + this.state.debug.addCounter;\n      //   thisDay = thisDay.toString();\n      //\n      //   if (this.state.debug.addDay){\n      //     let debug = {...this.state.debug};\n      //     debug.addCounter++;\n      //     debug.addDay = false;\n      //     this.setState({debug : debug})\n      //     this.newDayUpdateStreakCounter();\n      //     this.resetForNewDay();\n      //   }\n      // }\n\n      if (lastLoggedDate === currentDate) {\n        return false;\n      } else {\n        date.lastLoggedDate = currentDate;\n        date.visualDate = visDate;\n\n        _this.setState({\n          date: date\n        });\n\n        return true;\n      }\n    };\n\n    _this.resetForNewDay = function () {\n      console.log(\"resetForNewDay()\");\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      for (var i = 0; i < stacks.length; i++) {\n        _this.updateStreakCounter(i);\n      }\n\n      stacks.map(function (stack, index) {\n        stacks[index].map(function (habit) {\n          habit.result = \"neutral\";\n        });\n      });\n\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      stacksInfo.map(function (stackInfo) {\n        stackInfo.todayStreakChange = 0;\n      });\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.forceNextDay = function () {\n      var debug = _objectSpread({}, _this.state.debug);\n\n      debug.addDay = true;\n\n      _this.setState({\n        debug: debug\n      });\n    };\n\n    _this.updateLocaLStorage = function () {\n      var newStackInfo = JSON.parse(localStorage.getItem('StacksInfo')); //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n\n      localStorage.setItem(\"Stacks\", JSON.stringify(_this.state.stacks));\n      localStorage.setItem(\"StacksInfo\", JSON.stringify(_this.state.stacksInfo));\n      localStorage.setItem(\"Date\", JSON.stringify(_this.state.date));\n      localStorage.setItem(\"Debug\", JSON.stringify(_this.state.debug));\n\n      var debug = _objectSpread({}, _this.state.debug);\n\n      debug.text = \"Local updated at : \" + debug.textCounter;\n      debug.textCounter++;\n\n      _this.setState({\n        debug: debug\n      });\n    };\n\n    _this.populateStateFromStorage = function () {\n      var building = _objectSpread({}, _this.state.building); //use localStorage to re-populate state when app is refreshed\n      //when all setState's are complete only then is the interval created for checking if it's a new day\n\n\n      var newStack = JSON.parse(localStorage.getItem('Stacks'));\n      var newDate = JSON.parse(localStorage.getItem('Date'));\n      var newStackInfo = JSON.parse(localStorage.getItem('StacksInfo'));\n      var newDebug = JSON.parse(localStorage.getItem('Debug')); //don't exit function until all setStates are complete\n      //this could probably be written better\n\n      var stateToBeUpdated = [];\n\n      if (newStack) {\n        stateToBeUpdated.push(\"newStack\");\n      }\n\n      if (newDate) {\n        stateToBeUpdated.push(\"newDate\");\n      }\n\n      if (newStackInfo) {\n        stateToBeUpdated.push(\"newStackInfo\");\n      }\n\n      if (newDebug) {\n        stateToBeUpdated.push(\"newDebug\");\n      }\n\n      var updateStateArray = function updateStateArray(item) {\n        stateToBeUpdated = stateToBeUpdated.filter(function (element) {\n          return element !== item;\n        });\n\n        if (stateToBeUpdated.length === 0) {\n          building.populateFromStateIsComplete = true;\n\n          _this.setState({\n            building: building\n          }, function () {\n            _this.setInterval();\n          });\n        }\n      };\n\n      if (newStack) {\n        _this.setState({\n          stacks: newStack\n        }, function () {\n          updateStateArray(\"newStack\");\n        });\n      }\n\n      if (newDate) {\n        _this.setState({\n          date: newDate\n        }, function () {\n          updateStateArray(\"newDate\");\n        });\n      }\n\n      if (newStackInfo) {\n        _this.setState({\n          stacksInfo: newStackInfo\n        }, function () {\n          updateStateArray(\"newStackInfo\");\n        });\n      }\n\n      if (newDebug) {\n        _this.setState({\n          debug: newDebug\n        }, function () {\n          updateStateArray(\"newDebug\");\n        });\n      }\n    };\n\n    _this.clearStorage = function () {\n      localStorage.clear(); //return habit circles to neutral for new day\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks.map(function (stack, index) {\n        stacks[index].map(function (habit) {\n          habit.result = \"neutral\";\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.populateStateFromStorage();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AppStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 698\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 700\n        },\n        __self: this\n      }), React.createElement(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701\n        },\n        __self: this\n      }), React.createElement(ViewStacks, {\n        stacks: this.state.stacks,\n        stacksInfo: this.state.stacksInfo,\n        day: this.state.date.visualDate,\n        toggleStack: this.toggleStack,\n        logHabit: this.logHabit,\n        onSortEnd: this.onSortEnd,\n        addHabit: this.addHabit,\n        deleteHabit: this.deleteHabit,\n        addStack: this.addStack,\n        toggleAddMode: this.toggleAddMode,\n        toggleEditMode: this.toggleEditMode,\n        cancelActiveModules: this.cancelActiveModules,\n        activeStates: this.state.activeStates,\n        nextDay: this.forceNextDay,\n        clearStorage: this.clearStorage,\n        addHabitFormSubmission: this.addHabitFormSubmission,\n        addStackFormSubmission: this.addStackFormSubmission,\n        checkForNullHabits: this.checkForNullHabits,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/benreimer/Develop/stacks/stacks-v3/src/App.js"],"names":["React","Component","Raven","sentry_url","logException","ViewStacks","arrayMove","styled","createGlobalStyle","AppStyled","div","Typography","GlobalStyles","DebugLog","config","tags","git_commit","install","App","state","stacks","stacksInfo","date","lastLoggedDate","visualDate","isFirstDayOfUse","activeStates","addModeIsActive","addHabitModuleIsActive","addStackModuleIsActive","editModeIsActive","building","stackBeingAddedTo","populateFromStateIsComplete","debug","debugMode","addDay","addCounter","text","textCounter","habitResultHandler","result","habitEasyComplete","itemId","stackId","stack","i","length","logHabit","habitToUpdate","updatedResult","shouldUpdateStreakCounter","lastHabitInStack","today","log","setState","stateUpdateComplete","updateLocaLStorage","updateStreakCounter","addHabit","addStack","checkForNullHabits","forEach","habit","habitId","deleteHabit","addHabitFormSubmission","newHabit","newStack","action","cue","push","cancelActiveModules","toggleAddMode","addStackFormSubmission","name","stackName","streak","todayStreakChange","height","splice","finalResult","streakChange","debugStacksInfo","console","newDayUpdateStreakCounter","thereAreNeutralHabits","map","index","editMode","toggleStack","id","activeState","toggleEditMode","onSortEnd","oldIndex","newIndex","collection","newstacks","setInterval","interval","dayController","day","month","fullDate","Date","thisDay","getDate","toString","thisMonth","getMonth","thisYear","getFullYear","currentDate","visDate","isNewDay","resetForNewDay","stackInfo","forceNextDay","newStackInfo","JSON","parse","localStorage","getItem","setItem","stringify","populateStateFromStorage","newDate","newDebug","stateToBeUpdated","updateStateArray","item","filter","element","clearStorage","clear","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Raven from 'raven-js';\nimport { sentry_url, logException } from './config.js';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styled, {createGlobalStyle} from 'styled-components';\n\n\n/**************\nTO DO\n\n\nremove previous serviceworker or clear it's cache atleast when I push an updated version of the app\n^ progress is currently logged in localStorage so it's cool.\n\nComponents\n\n- 'Edit' button\nwhen edit is active either completly stop loghabit or atleast the edit section of it.\n\n\n\n\n- 'Miss' management component\n\n- stack bar color when all complete\n- Add days of the week to habits\n- Learn push messaging and add reminders to habits (or reminders to your stack)\n\n- make the android PWA download pop-up work\n- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n- animation for successes and misses\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nconst AppStyled = styled.div`\n  position:relative;\n  width:100%;\n  height: 100%;\n  margin: 0 auto;\n  display: block;\n  padding-top: 100px;\n\n  @media(min-width:769px){\n    .App {\n      margin-top: 40px;\n    }\n  }\n`\nconst Typography = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\n`;\nconst GlobalStyles = createGlobalStyle`\n  h3, h4 {\n    font-family : 'Poppins';\n    font-weight : 700;\n  }\n  body {\n    font-family: 'Roboto';\n    font-weight: 400;\n    height: 100%;\n  }\n  html {\n    font-size: 16px;\n    overflow: scroll;\n    overflow-x: hidden;\n    height: 100%;\n  }\n  ::-webkit-scrollbar {\n    width: 0px;  /* remove scrollbar space */\n    background: transparent;  /* optional: just make scrollbar invisible */\n  }\n  button {\n      display: block;\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\n      border-radius: 4px;\n      height: 30px;\n      // width:85px;\n      padding-top: 4px;\n      padding-left: 13px;\n      padding-right: 13px;\n      font-family: Poppins;\n      font-weight: 500;\n      font-size: 1rem;\n      color: #3D3D3D;\n      text-align: center;\n      transition: width .2s;\n      -webkit-touch-callout: none; /* iOS Safari */\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\n      -khtml-user-select: none; /* Konqueror */\n      -moz-user-select: none; /* Firefox */\n      -ms-user-select: none; /* Internet Explorer/Edge */\n       user-select: none;\n  }\n  button:focus{\n    outline: none;\n  }\n`;\nconst DebugLog = styled.div`\n  position:absolute;\n  width:100%;\n  bottom: 70px;\n  z-index:10;\n  padding-left: 5px;\n`\n\n//\nRaven.config(sentry_url, {\n  tags: {\n    git_commit: 'as09d8f09'\n  }\n}).install();\n// logException(new Error('Incomplete Data!'), {\n//   email: 'benreimer9@gmail.com'\n// });\n//\n// Raven.showReportDialog();\n\n\nclass App extends Component {\n\n\n\n  state = {\n    stacks : [\n      /*[ //stack 1\n        {\n          action : \"Meditate 15mins\",\n          cue: \"7:00am\",\n          result: \"neutral\",\n          log : {},\n        },\n      ],*/\n    ],\n    stacksInfo : [\n      // { name : \"Routine One\", streak: 0, todayStreakChange:0, height : \"auto\", },\n    ],\n    date : {\n      lastLoggedDate : null, // day/month/year\n      visualDate : null,\n      isFirstDayOfUse : true,\n    },\n    activeStates : {\n      addModeIsActive : false,\n      addHabitModuleIsActive : false,\n      addStackModuleIsActive : false,\n      editModeIsActive : false,\n    },\n    building : {\n      stackBeingAddedTo : 0, //defaults to first stack\n      populateFromStateIsComplete : false,\n    },\n    debug : {\n      debugMode : false,\n      addDay : false,\n      addCounter : 0,\n      text : \" __ \",\n      textCounter : 0,\n    }\n  };\n\n\n  //HABITS AND STACKS\n  habitResultHandler = (result) => {\n    switch (result){\n      case \"neutral\" :\n        return \"complete\";\n      case \"complete\" :\n        return \"miss\";\n      case \"miss\" :\n        return \"skip\";\n      case \"skip\" :\n        return \"neutral\";\n      default :\n        return \"neutral\";\n    }\n  }\n  habitEasyComplete = (itemId, stackId) => {\n    //turn earlier habits in stack into 'complete' if they're neutral\n\n    let stack = [...this.state.stacks[stackId]];\n    for (var i = 0; i < stack.length; i++) {\n      if (itemId > i && stack[i].result === \"neutral\"){\n        this.logHabit(i, stackId)\n      }\n    }\n  }\n\n  /*\n  when a habit is tapped it logHabit()\n  addHabit opens the addHabitModule and begins the process\n  while AddHabitFormSubmission completes the process.\n  */\n  logHabit = (itemId, stackId) => {\n\n    let stacks = [...this.state.stacks];\n\n    //leave if no habits in stack or in edit mode\n    if (stacks[stackId].length === 0){return}\n    if (this.state.activeStates.editModeIsActive === true){return}\n\n    let habitToUpdate = stacks[stackId][itemId];\n    let result = habitToUpdate.result; //neutral, complete, miss, etc.\n    let updatedResult = this.habitResultHandler(result); //toggle to next result\n    let shouldUpdateStreakCounter = false;\n\n\n\n    if (updatedResult === \"complete\"){\n      this.habitEasyComplete(itemId, stackId);\n    }\n    //if last habit in a stack is logged with any result, update streakcounter\n    let lastHabitInStack = stacks[stackId].length-1;\n    if (stacks[stackId][lastHabitInStack].result !== null){\n      shouldUpdateStreakCounter = true;\n    }\n\n    habitToUpdate.result = updatedResult;\n\n    //add habit to the habit's log\n    let today = this.state.date.lastLoggedDate;\n    habitToUpdate.log[today] = updatedResult;\n\n\n    this.setState({stacks : stacks}, function stateUpdateComplete(){\n      this.updateLocaLStorage();\n      if (shouldUpdateStreakCounter) {\n        this.updateStreakCounter(stackId)\n      };\n    })\n\n  }\n  addHabit = (stackId) => {\n\n    const activeStates = {...this.state.activeStates};\n    const building = {...this.state.building};\n\n    //toggle off editMode if it's on\n    let editModeIsActive = activeStates.editModeIsActive;\n    if (editModeIsActive){\n      activeStates.editModeIsActive = false;\n    }\n    \n\n    activeStates.addHabitModuleIsActive = true;\n    building.stackBeingAddedTo = stackId;\n\n    this.setState({ activeStates : activeStates });\n    this.setState({ building : building });\n  }\n  addStack = (stackId) => {\n\n    const activeStates = {...this.state.activeStates};\n    const building = {...this.state.building};\n\n    activeStates.addStackModuleIsActive = true;\n    building.stackBeingAddedTo = stackId;\n\n    this.setState({ activeStates : activeStates });\n    this.setState({ building : building });\n  }\n  checkForNullHabits = () => {\n    let stacks = [...this.state.stacks];\n\n    stacks.forEach((stack, stackId) => {\n      stack.forEach((habit, habitId) => {\n        if (habit === null){\n          this.deleteHabit(habitId, stackId);\n        }\n      })\n    })\n  }\n  addHabitFormSubmission = (newHabit) => {\n\n    let stackId = this.state.building.stackBeingAddedTo;\n    let newStack = [...this.state.stacks];\n\n    let action = newHabit.action;\n    let cue = newHabit.cue;\n\n    newStack[stackId].push(\n      {\n        action : action,\n        cue: cue,\n        result: \"neutral\",\n        log : {},\n      }\n    )\n\n    const building = {...this.state.building};\n    building.stackBeingAddedTo = 0; //defaults to first stack\n    this.setState({building : building });\n    this.setState({stacks : newStack})\n    this.updateLocaLStorage();\n\n    this.cancelActiveModules();\n    this.toggleAddMode();\n  }\n  addStackFormSubmission = (newStack) => {\n\n    let stacks = [...this.state.stacks];\n    let stacksInfo = [...this.state.stacksInfo];\n\n    stacksInfo.push(\n      { name : newStack.stackName, streak: 0, todayStreakChange:0, height : \"auto\", },\n    )\n    stacks.push([]);\n\n\n    this.setState({stacksInfo : stacksInfo});\n    this.setState({stacks : stacks});\n\n    this.cancelActiveModules();\n    this.toggleAddMode();\n    this.updateLocaLStorage();\n  }\n  deleteHabit = (habitId, stackId) => {\n\n    let stacks = [...this.state.stacks];\n    stacks[stackId].splice(habitId, 1);\n    this.setState({stacks : stacks});\n\n  }\n\n  //STREAKS\n  updateStreakCounter = (stackId) => {\n    let stacksInfo = [...this.state.stacksInfo];\n    let finalResult = null;\n    let streakChange = stacksInfo[stackId].todayStreakChange;\n    let stack = [...this.state.stacks[stackId]];\n\n    for (var i = 0; i < stack.length; i++) {\n\n      if (stack[i].result === \"complete\" && finalResult !== \"failed\" && finalResult !== \"incomplete\"){\n        finalResult = \"completed\";\n      }\n      else if(stack[i].result === \"miss\"){\n        finalResult = \"failed\";\n      }\n      else if (stack[i].result === \"skip\" && finalResult !== \"failed\" && finalResult !== \"incomplete\"){\n        finalResult = \"completed\";\n      }\n      else if (stack[i].result === \"neutral\"){\n        //catch any neutrals -- this means logging for the day isn't done yet\n        finalResult = \"incomplete\";\n      }\n    }\n\n    if (finalResult === \"failed\"){\n      if (streakChange !== -1){ //only remove 1 if it hasn't already today\n        if(stacksInfo[stackId].streak !== 0){ //don't let it go into negatives when streak is at 0\n          stacksInfo[stackId].streak--;\n          streakChange = -1;\n        }\n      }\n    }\n    if (finalResult === \"completed\"){\n      if (streakChange !== 1){\n        stacksInfo[stackId].streak++;\n        streakChange = 1;\n      }\n    }\n\n    stacksInfo[stackId].todayStreakChange = streakChange;\n    this.setState({stacksInfo : stacksInfo})\n\n\n  }\n  debugStacksInfo = () => {\n    let stacksInfo = [...this.state.stacksInfo];\n    console.log(\"in debug stacksInfo is: \", stacksInfo);\n  }\n  newDayUpdateStreakCounter = () => {\n    //check for any incompletes from yesterday and mark as failed\n    //this should run right before the resetForNewDay() does\n\n    let stacksInfo = [...this.state.stacksInfo];\n    let stacks = [...this.state.stacks];\n    let thereAreNeutralHabits = false;\n\n    console.log(\"stacksInfo was : \", stacksInfo);\n\n    stacks.map( (stack, index) => {\n      for (var i = 0; i < stack.length; i++) {\n        if (stack[i].result === \"neutral\"){\n          //catch any neutrals -- this means logging for the day isn't done yet\n          thereAreNeutralHabits = true;\n        }\n      }\n      if (thereAreNeutralHabits){\n        if (stacksInfo[index].todayStreakChange !== -1){ //only remove 1 if it hasn't already today\n          if(stacksInfo[index].streak !== 0){ //don't let it go into negatives when streak is at 0\n            stacksInfo[index].streak--;\n            stacksInfo[index].todayStreakChange = -1;\n          }\n        }\n      }\n    })\n    console.log(\"stacksInfo has become : \", stacksInfo);\n    return;\n    this.setState({stacksInfo : stacksInfo})\n\n  }\n\n  //OTHER\n  editMode = () => {\n    console.log(\"edit mode active\");\n  }\n  toggleStack = (id) => {\n\n    let stacksInfo = [...this.state.stacksInfo];\n    let toggleStack = stacksInfo[id];\n    let newStack = toggleStack;\n\n    //note : if you change -10 also change it in 'Burger' styled component in Stack.js\n    newStack.height = toggleStack.height === -10 ? 'auto' : -10;\n    stacksInfo[id] = newStack;\n\n    this.setState({\n      stacksInfo : stacksInfo\n    })\n  }\n  toggleAddMode = () => {\n    const activeState = this.state.activeStates;\n    activeState.addModeIsActive = !activeState.addModeIsActive;\n    this.setState({ activeState : activeState})\n  }\n  toggleEditMode = () => {\n    let activeState = this.state.activeStates;\n    activeState.editModeIsActive = !activeState.editModeIsActive;\n    this.setState({ activeState : activeState})\n  }\n  cancelActiveModules = () => {\n    let activeStates = {...this.state.activeStates};\n    activeStates.addHabitModuleIsActive = false;\n    activeStates.addStackModuleIsActive = false;\n    this.setState({activeStates : activeStates});\n  }\n  onSortEnd = ({oldIndex, newIndex, collection}) => {\n    this.setState(({stacks}) => {\n      const newstacks = [...stacks];\n\n      newstacks[collection] = arrayMove(\n        stacks[collection],\n        oldIndex,\n        newIndex,\n      );\n      return {stacks: newstacks};\n    });\n  };\n  setInterval = () => {\n    //called when populateStateFromStorage is complete on component mount\n    this.interval = setInterval(() => this.dayController(), 1000)\n  }\n\n  //DAY-RELATED\n  visualDate = (day, month) => {\n    let today = null;\n\n    switch (month) {\n      case '0' :\n        today = \"Jan \" + day;\n        break;\n      case '1' :\n        today = \"Feb \" + day;\n        break;\n      case '2' :\n        today = \"March \" + day;\n        break;\n      case '3' :\n        today = \"April \" + day;\n        break;\n      case '4' :\n        today = \"May \" + day;\n        break;\n      case '5' :\n        today = \"June \" + day;\n        break;\n      case '6' :\n        today = \"July \" + day;\n        break;\n      case '7' :\n        today = \"Aug \" + day;\n        break;\n      case '8' :\n        today = \"Sept \" + day;\n        break;\n      case '9' :\n        today = \"Oct \" + day;\n        break;\n      case '10' :\n        today = \"Nov \" + day;\n        break;\n      case '11' :\n        today = \"Dec \" + day;\n        break;\n    }\n    return today;\n  }\n  dayController = () => {\n\n    //get the day\n    let fullDate = new Date();\n    let thisDay = fullDate.getDate().toString();\n    let thisMonth = fullDate.getMonth().toString();\n    let thisYear = fullDate.getFullYear().toString();\n\n    //build dates\n    let currentDate = thisDay + \"/\" + thisMonth + \"/\" + thisYear;\n    let visDate = this.visualDate(thisDay, thisMonth);\n\n    //check if is new day\n    if (this.isNewDay(currentDate, visDate)) {\n      this.newDayUpdateStreakCounter();\n      this.resetForNewDay();\n    }\n\n  }\n  isNewDay = (currentDate, visDate) => {\n\n    let date = {...this.state.date}\n    let lastLoggedDate = date.lastLoggedDate;\n\n\n    //Debug : force add a day for testing\n    // if (this.state.debug.debugMode){\n    //\n    //   thisDay = fullDate.getDate() + this.state.debug.addCounter;\n    //   thisDay = thisDay.toString();\n    //\n    //   if (this.state.debug.addDay){\n    //     let debug = {...this.state.debug};\n    //     debug.addCounter++;\n    //     debug.addDay = false;\n    //     this.setState({debug : debug})\n    //     this.newDayUpdateStreakCounter();\n    //     this.resetForNewDay();\n    //   }\n    // }\n\n    if (lastLoggedDate === currentDate){\n      return false;\n    }\n    else {\n      date.lastLoggedDate = currentDate;\n      date.visualDate = visDate;\n      this.setState({ date : date})\n      return true;\n    }\n\n  }\n  resetForNewDay = () => {\n\n    console.log(\"resetForNewDay()\");\n    let stacks = [...this.state.stacks];\n\n    for (var i = 0; i < stacks.length; i++) {\n      this.updateStreakCounter(i);\n    }\n\n    stacks.map( (stack, index) => {\n      stacks[index].map( habit => {\n        habit.result = \"neutral\"\n      })\n    });\n\n    let stacksInfo = [...this.state.stacksInfo];\n    stacksInfo.map( stackInfo => {\n      stackInfo.todayStreakChange = 0;\n    });\n\n    this.updateLocaLStorage();\n\n  }\n  forceNextDay = () => {\n\n    let debug = {...this.state.debug};\n    debug.addDay = true;\n    this.setState({debug : debug})\n  }\n\n\n  //STORAGE\n  updateLocaLStorage = () => {\n      let newStackInfo  = JSON.parse(localStorage.getItem('StacksInfo'));\n\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      localStorage.setItem(\"Stacks\", JSON.stringify(this.state.stacks));\n      localStorage.setItem(\"StacksInfo\", JSON.stringify(this.state.stacksInfo));\n      localStorage.setItem(\"Date\", JSON.stringify(this.state.date));\n      localStorage.setItem(\"Debug\", JSON.stringify(this.state.debug));\n\n      let debug = {...this.state.debug};\n      debug.text = \"Local updated at : \" + debug.textCounter;\n      debug.textCounter++;\n\n      this.setState({debug: debug})\n  }\n  populateStateFromStorage = () => {\n\n    let building = {...this.state.building};\n\n    //use localStorage to re-populate state when app is refreshed\n    //when all setState's are complete only then is the interval created for checking if it's a new day\n\n    let newStack = JSON.parse(localStorage.getItem('Stacks'));\n    let newDate = JSON.parse(localStorage.getItem('Date'));\n    let newStackInfo  = JSON.parse(localStorage.getItem('StacksInfo'));\n    let newDebug  = JSON.parse(localStorage.getItem('Debug'));\n\n\n    //don't exit function until all setStates are complete\n    //this could probably be written better\n\n    let stateToBeUpdated = [];\n\n    if (newStack) {\n      stateToBeUpdated.push(\"newStack\");\n    }\n    if (newDate){\n      stateToBeUpdated.push(\"newDate\");\n    }\n    if (newStackInfo){\n      stateToBeUpdated.push(\"newStackInfo\")\n    }\n    if (newDebug){\n      stateToBeUpdated.push(\"newDebug\")\n    }\n\n    let updateStateArray = (item) => {\n      stateToBeUpdated = stateToBeUpdated.filter(element => element !== item);\n      if (stateToBeUpdated.length === 0){\n        building.populateFromStateIsComplete = true;\n        this.setState({building : building}, () => {this.setInterval();})\n      }\n    }\n\n    if (newStack) {\n      this.setState({ stacks : newStack}, () => {updateStateArray(\"newStack\");})\n    }\n    if (newDate) {\n      this.setState({ date : newDate}, () => {updateStateArray(\"newDate\");})\n    }\n    if (newStackInfo) {\n      this.setState({ stacksInfo : newStackInfo}, () => {updateStateArray(\"newStackInfo\");})\n    }\n    if (newDebug) {\n      this.setState({ debug : newDebug}, () => {updateStateArray(\"newDebug\");})\n    }\n\n\n  }\n  clearStorage = () => {\n    localStorage.clear();\n\n    //return habit circles to neutral for new day\n    let stacks = [...this.state.stacks];\n\n    stacks.map( (stack, index) => {\n      stacks[index].map( habit => {\n        habit.result = \"neutral\"\n      })\n    })\n  }\n\n\n\n  componentDidMount() {\n\n    this.populateStateFromStorage();\n }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n\n\n\n  render() {\n\n    return (\n      <AppStyled>\n\n        <Typography />\n        <GlobalStyles />\n        <ViewStacks\n          stacks={this.state.stacks}\n          stacksInfo={this.state.stacksInfo}\n          day={this.state.date.visualDate}\n          toggleStack={this.toggleStack}\n          logHabit={this.logHabit}\n          onSortEnd={this.onSortEnd}\n          addHabit={this.addHabit}\n          deleteHabit={this.deleteHabit}\n          addStack={this.addStack}\n          toggleAddMode={this.toggleAddMode}\n          toggleEditMode={this.toggleEditMode}\n          cancelActiveModules={this.cancelActiveModules}\n          activeStates={this.state.activeStates}\n          nextDay={this.forceNextDay}\n          clearStorage={this.clearStorage}\n          addHabitFormSubmission={this.addHabitFormSubmission}\n          addStackFormSubmission={this.addStackFormSubmission}\n          checkForNullHabits={this.checkForNullHabits}\n        />\n        {/*<DebugLog>\n        {this.state.debug.text}\n        </DebugLog>*/}\n      </AppStyled>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}