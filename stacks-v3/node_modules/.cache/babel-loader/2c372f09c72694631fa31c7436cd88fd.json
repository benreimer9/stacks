{"ast":null,"code":"import _objectSpread from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _taggedTemplateLiteral from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/benreimer/Develop/stacks/stacks-v3/src/App.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  h3, h4 {\\n    font-family : 'Poppins';\\n    font-weight : 700;\\n  }\\n  body {\\n    font-family: 'Roboto';\\n    font-weight: 400;\\n    height: 100%;\\n  }\\n  html {\\n    font-size: 16px;\\n    overflow: scroll;\\n    overflow-x: hidden;\\n    height: 100%;\\n  }\\n  ::-webkit-scrollbar {\\n    width: 0px;  /* remove scrollbar space */\\n    background: transparent;  /* optional: just make scrollbar invisible */\\n  }\\n  button {\\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\\n      border-radius: 6px;\\n      height: 30px;\\n      // width:85px;\\n      padding-top: 4px;\\n      padding-left: 13px;\\n      padding-right: 13px;\\n      font-family: Poppins;\\n      font-weight: 500;\\n      font-size: 1rem;\\n      color: #3D3D3D;\\n      text-align: center;\\n      transition: width .2s;\\n      -webkit-touch-callout: none; /* iOS Safari */\\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\\n      -khtml-user-select: none; /* Konqueror */\\n      -moz-user-select: none; /* Firefox */\\n      -ms-user-select: none; /* Internet Explorer/Edge */\\n       user-select: none;\\n  }\\n  button:focus{\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position:relative;\\n  overflow:hidden;\\n  width:100%;\\n  height: 100%;\\n  max-width: 500px;\\n  margin: 0 auto;\\n  display: block;\\n  padding-top: 100px;\\n\\n  @media(min-width:769px){\\n    .App {\\n      margin-top: 40px;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styled, { createGlobalStyle } from 'styled-components';\n/**************\nTO DO\n\n\n!- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n\n- How will dayOfHabit handle habits starting on way later dates? lots of null array items?\n- Ability to add a new stack\n- Ability to rearrange stacks (under info)\n- Add new habits (use formik)\n- stack bar color when all complete\n- Streak counter 'working'\n- 'Edit' button\n\n\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nvar AppStyled = styled.div(_templateObject());\nvar Typography = createGlobalStyle(_templateObject2());\nvar GlobalStyles = createGlobalStyle(_templateObject3());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stacks: [[//stack 1\n      {\n        action: \"Meditate 15mins\",\n        cue: \"7:00am\",\n        result: \"neutral\",\n        log: [\"\"]\n      }, {\n        action: \"Exercise\",\n        cue: \"then\",\n        result: \"neutral\",\n        log: [\"\"]\n      }]],\n      stacksInfo: [{\n        name: \"Routine One\",\n        streak: 0,\n        height: \"auto\"\n      }],\n      date: {\n        lastLoggedDay: null,\n        lastLoggedMonth: null,\n        lastLoggedYear: null,\n        dayOfHabit: 0\n      },\n      activeStates: {\n        addModeIsActive: false,\n        addModuleIsActive: false,\n        editModeIsActive: false\n      }\n    };\n\n    _this.habitResultHandler = function (result) {\n      switch (result) {\n        case \"neutral\":\n          return \"complete\";\n\n        case \"complete\":\n          return \"miss\";\n\n        case \"miss\":\n          return \"skip\";\n\n        case \"skip\":\n          return \"neutral\";\n\n        default:\n          return \"neutral\";\n      }\n    };\n\n    _this.habitEasyComplete = function (itemId, stackId) {\n      //turn earlier habits in stack into 'complete' if they're neutral\n      var newStack = _toConsumableArray(_this.state.stacks);\n\n      newStack[stackId] = newStack[stackId].map(function (habit, i) {\n        if (itemId > i && habit.result === \"neutral\") {\n          habit.result = \"complete\";\n          habit.log[_this.state.date.dayOfHabit] = \"complete\";\n          return;\n        }\n\n        return false;\n      });\n\n      _this.setState({\n        oldStack: newStack\n      });\n    };\n\n    _this.logHabit = function (itemId, stackId) {\n      var newStack = _toConsumableArray(_this.state.stacks);\n\n      var result = newStack[stackId][itemId].result; //neutral, complete, miss, etc.\n\n      var updatedResult = _this.habitResultHandler(result); //toggle to next result\n\n\n      if (updatedResult === \"complete\") {\n        _this.habitEasyComplete(itemId, stackId);\n      }\n\n      if (itemId + 1 === newStack[stackId].length) {\n        _this.updateStreakCounter(stackId);\n      }\n\n      newStack[stackId][itemId].result = updatedResult; //update habit log\n\n      var log = newStack[stackId][itemId].log;\n      log[_this.state.date.dayOfHabit] = updatedResult;\n      newStack[stackId][itemId].log = log;\n\n      _this.setState({\n        stacks: newStack\n      });\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.addHabit = function (stackId) {\n      var newStack = _toConsumableArray(_this.state.stacks);\n\n      var activeStates = _this.state.activeStates;\n      var newActiveStates = activeStates;\n      newActiveStates.addModuleIsActive = true;\n\n      _this.setState({\n        activeStates: newActiveStates\n      });\n\n      var cue = prompt(\"Cue : \");\n      var action = prompt(\"Action : \");\n      newStack[stackId].push({\n        action: action,\n        cue: cue,\n        result: \"neutral\",\n        log: []\n      });\n\n      _this.setState({\n        stacks: newStack\n      });\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.updateStreakCounter = function (stackId) {\n      var newStackInfo = _objectSpread({}, _this.state.stacksInfo);\n\n      var result = null;\n      var st = _this.state.stacks;\n      var stack = _this.state.stacks[stackId];\n\n      var that = _assertThisInitialized(_assertThisInitialized(_this)); //give a few seconds for users to log any misses / neutrals / skips\n\n\n      setTimeout(function () {\n        for (var i = 0; i < stack.length; i++) {\n          console.log(\"stack i is: \" + stack[i].result);\n\n          if (stack[i].result === \"complete\") {\n            console.log(\"complete, continue\");\n            result = \"completed\";\n          } else if (stack[i].result === \"miss\") {\n            console.log(\"leave the loop and fail\");\n            result = \"failed\";\n            return;\n          } else {\n            console.log(\"it's neutral or skipped\");\n            return;\n          }\n        }\n\n        if (result === \"failed\") {\n          newStackInfo[stackId].streak--;\n          console.log(\"failed! minus one to streak\");\n        }\n\n        if (result === \"completed\") {\n          newStackInfo[stackId].streak++;\n        }\n\n        that.setState({\n          stacksInfo: newStackInfo\n        });\n      }, 2000);\n    };\n\n    _this.toggleStack = function (id) {\n      var toggleStack = _this.state.stacksInfo[id];\n      var newStack = toggleStack;\n      newStack.height = toggleStack.height === 0 ? 'auto' : 0;\n\n      _this.setState({\n        toggleStack: newStack\n      });\n    };\n\n    _this.toggleAddMode = function () {\n      var activeState = _this.state.activeStates;\n      var newActiveState = activeState;\n      newActiveState.addModeIsActive = !activeState.addModeIsActive;\n\n      _this.setState({\n        activeState: newActiveState\n      });\n    };\n\n    _this.onSortEnd = function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex,\n          collection = _ref.collection;\n\n      _this.setState(function (_ref2) {\n        var stacks = _ref2.stacks;\n\n        var newstacks = _toConsumableArray(stacks);\n\n        newstacks[collection] = arrayMove(stacks[collection], oldIndex, newIndex);\n        return {\n          stacks: newstacks\n        };\n      });\n    };\n\n    _this.checkIsSameDay = function (thisDay, thisMonth, thisYear) {\n      if (_this.state.date.lastLoggedDay === null) {\n        //first day of using the app!\n        return true;\n      } else if (thisDay !== _this.state.date.lastLoggedDay) {\n        if (thisMonth === _this.state.date.lastLoggedMonth && thisYear === _this.state.date.lastLoggedYear) {\n          return false;\n        }\n      } else if (thisDay === _this.state.date.lastLoggedDay && thisMonth === _this.state.date.lastLoggedMonth && thisYear === _this.state.date.lastLoggedYear) {\n        return true;\n      }\n    };\n\n    _this.updateLastLoggedDate = function (thisDay, thisMonth, thisYear) {\n      var newDate = _objectSpread({}, _this.state.date);\n\n      newDate.thisDay = thisDay;\n      newDate.thisMonth = thisMonth;\n      newDate.thisYear = thisYear;\n      newDate.dayOfHabit = newDate.dayOfHabit + 1;\n\n      _this.setState({\n        date: newDate\n      });\n    };\n\n    _this.resetForNewDay = function () {\n      var newDate = _objectSpread({}, _this.state.date);\n\n      newDate.dayOfHabit = newDate.dayOfHabit + 1;\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks[0].map(function (habit) {\n        habit.result = \"neutral\";\n      });\n\n      _this.setState({\n        date: newDate\n      });\n    };\n\n    _this.updateLocaLStorage = function () {\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      localStorage.setItem(\"Stacks\", JSON.stringify(_this.state.stacks));\n      localStorage.setItem(\"Date\", JSON.stringify(_this.state.date));\n    };\n\n    _this.populateStateFromStorage = function () {\n      //use localStorage to re-populate state when app is refreshed\n      var newStack = JSON.parse(localStorage.getItem('Stacks'));\n      var newDate = JSON.parse(localStorage.getItem('Date'));\n\n      if (newStack) {\n        _this.setState({\n          stacks: newStack\n        });\n      }\n\n      if (newDate) {\n        _this.setState({\n          date: newDate\n        });\n      }\n    };\n\n    _this.clearStorage = function () {\n      localStorage.clear(); //return habit circles to neutral for new day\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks[0].map(function (habit) {\n        habit.result = \"neutral\";\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //populate storedHabit in state from localStorage from previous sessions\n      this.populateStateFromStorage(); //get the day\n\n      var fullDate = new Date();\n      var thisDay = fullDate.getDate();\n      var thisMonth = fullDate.getMonth();\n      var thisYear = fullDate.getYear();\n      var isSameDay = this.checkIsSameDay(thisDay, thisMonth, thisYear);\n\n      if (!isSameDay) {\n        this.updateLocaLStorage();\n        this.resetForNewDay();\n        this.updateLastLoggedDate(thisDay, thisMonth, thisYear);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AppStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }), React.createElement(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }), React.createElement(ViewStacks, {\n        stacks: this.state,\n        stacksInfo: this.state.stacksInfo,\n        day: this.state.date.dayOfHabit,\n        toggleStack: this.toggleStack,\n        logHabit: this.logHabit,\n        onSortEnd: this.onSortEnd,\n        addHabit: this.addHabit,\n        toggleAddMode: this.toggleAddMode,\n        activeStates: this.state.activeStates,\n        nextDay: this.resetForNewDay,\n        clearStorage: this.clearStorage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/benreimer/Develop/stacks/stacks-v3/src/App.js"],"names":["React","Component","ViewStacks","arrayMove","styled","createGlobalStyle","AppStyled","div","Typography","GlobalStyles","App","state","stacks","action","cue","result","log","stacksInfo","name","streak","height","date","lastLoggedDay","lastLoggedMonth","lastLoggedYear","dayOfHabit","activeStates","addModeIsActive","addModuleIsActive","editModeIsActive","habitResultHandler","habitEasyComplete","itemId","stackId","newStack","map","habit","i","setState","oldStack","logHabit","updatedResult","length","updateStreakCounter","updateLocaLStorage","addHabit","newActiveStates","prompt","push","newStackInfo","st","stack","that","setTimeout","console","toggleStack","id","toggleAddMode","activeState","newActiveState","onSortEnd","oldIndex","newIndex","collection","newstacks","checkIsSameDay","thisDay","thisMonth","thisYear","updateLastLoggedDate","newDate","resetForNewDay","localStorage","setItem","JSON","stringify","populateStateFromStorage","parse","getItem","clearStorage","clear","fullDate","Date","getDate","getMonth","getYear","isSameDay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styled, {createGlobalStyle} from 'styled-components';\n\n/**************\nTO DO\n\n\n!- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n\n- How will dayOfHabit handle habits starting on way later dates? lots of null array items?\n- Ability to add a new stack\n- Ability to rearrange stacks (under info)\n- Add new habits (use formik)\n- stack bar color when all complete\n- Streak counter 'working'\n- 'Edit' button\n\n\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nconst AppStyled = styled.div`\n  position:relative;\n  overflow:hidden;\n  width:100%;\n  height: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n  display: block;\n  padding-top: 100px;\n\n  @media(min-width:769px){\n    .App {\n      margin-top: 40px;\n    }\n  }\n`\nconst Typography = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\n`;\nconst GlobalStyles = createGlobalStyle`\n  h3, h4 {\n    font-family : 'Poppins';\n    font-weight : 700;\n  }\n  body {\n    font-family: 'Roboto';\n    font-weight: 400;\n    height: 100%;\n  }\n  html {\n    font-size: 16px;\n    overflow: scroll;\n    overflow-x: hidden;\n    height: 100%;\n  }\n  ::-webkit-scrollbar {\n    width: 0px;  /* remove scrollbar space */\n    background: transparent;  /* optional: just make scrollbar invisible */\n  }\n  button {\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\n      border-radius: 6px;\n      height: 30px;\n      // width:85px;\n      padding-top: 4px;\n      padding-left: 13px;\n      padding-right: 13px;\n      font-family: Poppins;\n      font-weight: 500;\n      font-size: 1rem;\n      color: #3D3D3D;\n      text-align: center;\n      transition: width .2s;\n      -webkit-touch-callout: none; /* iOS Safari */\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\n      -khtml-user-select: none; /* Konqueror */\n      -moz-user-select: none; /* Firefox */\n      -ms-user-select: none; /* Internet Explorer/Edge */\n       user-select: none;\n  }\n  button:focus{\n    outline: none;\n  }\n`;\n\n\n\nclass App extends Component {\n\n\n\n  state = {\n    stacks : [\n      [ //stack 1\n        {\n          action : \"Meditate 15mins\",\n          cue: \"7:00am\",\n          result: \"neutral\",\n          log : [\"\"],\n        },\n        {\n          action:\"Exercise\",\n          cue:\"then\",\n          result: \"neutral\",\n          log : [\"\"],\n        },\n      ],\n    ],\n    stacksInfo : [\n      { name : \"Routine One\", streak: 0, height : \"auto\", },\n    ],\n    date : {\n      lastLoggedDay : null,\n      lastLoggedMonth : null,\n      lastLoggedYear : null,\n      dayOfHabit : 0,\n    },\n    activeStates : {\n      addModeIsActive : false,\n      addModuleIsActive : false,\n      editModeIsActive : false,\n    },\n  };\n\n\n  //HABITS\n  habitResultHandler = (result) => {\n    switch (result){\n      case \"neutral\" :\n        return \"complete\";\n      case \"complete\" :\n        return \"miss\";\n      case \"miss\" :\n        return \"skip\";\n      case \"skip\" :\n        return \"neutral\";\n      default :\n        return \"neutral\";\n    }\n  }\n  habitEasyComplete = (itemId, stackId) => {\n    //turn earlier habits in stack into 'complete' if they're neutral\n\n    const newStack = [...this.state.stacks];\n\n    newStack[stackId] = newStack[stackId].map( (habit, i) => {\n      if (itemId > i && habit.result === \"neutral\"){\n        habit.result = \"complete\";\n        habit.log[this.state.date.dayOfHabit] = \"complete\";\n        return;\n      }\n      return false;\n    });\n\n    this.setState({oldStack : newStack})\n  }\n  logHabit = (itemId, stackId) => {\n\n    const newStack = [...this.state.stacks];\n    const result = newStack[stackId][itemId].result; //neutral, complete, miss, etc.\n    const updatedResult = this.habitResultHandler(result); //toggle to next result\n\n    if (updatedResult === \"complete\"){\n      this.habitEasyComplete(itemId, stackId);\n    }\n    if (itemId+1 === newStack[stackId].length){\n      this.updateStreakCounter(stackId);\n    }\n    newStack[stackId][itemId].result = updatedResult;\n\n    //update habit log\n    const log = newStack[stackId][itemId].log;\n    log[this.state.date.dayOfHabit] = updatedResult;\n    newStack[stackId][itemId].log = log;\n\n    this.setState({stacks : newStack})\n    this.updateLocaLStorage();\n\n  }\n  addHabit = (stackId) => {\n\n    const newStack = [...this.state.stacks]\n\n    const activeStates = this.state.activeStates;\n    const newActiveStates = activeStates;\n\n    newActiveStates.addModuleIsActive = true;\n    this.setState({ activeStates : newActiveStates })\n\n    let cue = prompt(\"Cue : \");\n    let action = prompt(\"Action : \");\n    newStack[stackId].push(\n      {\n        action : action,\n        cue: cue,\n        result: \"neutral\",\n        log : [],\n      }\n    )\n\n    this.setState({stacks : newStack})\n    this.updateLocaLStorage();\n  }\n\n\n  //STREAKS\n  updateStreakCounter = (stackId) => {\n    let newStackInfo = {...this.state.stacksInfo};\n    let result = null;\n    let st = this.state.stacks;\n    let stack = this.state.stacks[stackId];\n    let that = this;\n\n    //give a few seconds for users to log any misses / neutrals / skips\n    setTimeout(function () {\n      for (var i = 0; i < stack.length; i++) {\n\n        console.log(\"stack i is: \" + stack[i].result);\n        if (stack[i].result === \"complete\"){\n          console.log(\"complete, continue\");\n          result = \"completed\";\n        }\n        else if(stack[i].result === \"miss\"){\n          console.log(\"leave the loop and fail\");\n          result = \"failed\"\n          return;\n        }\n        else {\n          console.log(\"it's neutral or skipped\");\n          return;\n        }\n      }\n\n      if (result === \"failed\"){\n        newStackInfo[stackId].streak --;\n        console.log(\"failed! minus one to streak\");\n      }\n      if (result === \"completed\"){\n        newStackInfo[stackId].streak ++;\n      }\n\n      that.setState({stacksInfo : newStackInfo})\n    }, 2000);\n\n\n  }\n\n\n  //OTHER\n  toggleStack = (id) => {\n    let toggleStack = this.state.stacksInfo[id];\n    let newStack = toggleStack;\n\n    newStack.height = toggleStack.height === 0 ? 'auto' : 0;\n\n    this.setState({\n      toggleStack : newStack\n    })\n  }\n  toggleAddMode = () => {\n    const activeState = this.state.activeStates;\n    const newActiveState = activeState;\n    newActiveState.addModeIsActive = !activeState.addModeIsActive;\n    this.setState({ activeState : newActiveState})\n  }\n  onSortEnd = ({oldIndex, newIndex, collection}) => {\n    this.setState(({stacks}) => {\n      const newstacks = [...stacks];\n\n      newstacks[collection] = arrayMove(\n        stacks[collection],\n        oldIndex,\n        newIndex,\n      );\n      return {stacks: newstacks};\n    });\n  };\n\n\n\n  //DAY-RELATED\n  checkIsSameDay = (thisDay, thisMonth, thisYear) => {\n\n    if (this.state.date.lastLoggedDay === null){\n      //first day of using the app!\n      return true;\n    }\n    else if (thisDay !== this.state.date.lastLoggedDay){\n      if (thisMonth === this.state.date.lastLoggedMonth && thisYear === this.state.date.lastLoggedYear){\n        return false;\n      }\n    }\n    else if (thisDay === this.state.date.lastLoggedDay\n      && thisMonth === this.state.date.lastLoggedMonth\n      && thisYear === this.state.date.lastLoggedYear){\n      return true;\n    }\n  }\n  updateLastLoggedDate = (thisDay, thisMonth, thisYear) => {\n\n    let newDate = {...this.state.date};\n    newDate.thisDay = thisDay;\n    newDate.thisMonth= thisMonth;\n    newDate.thisYear = thisYear;\n    newDate.dayOfHabit = newDate.dayOfHabit + 1;\n\n    this.setState({date : newDate});\n  }\n  resetForNewDay = () => {\n\n    let newDate = {...this.state.date};\n    newDate.dayOfHabit = newDate.dayOfHabit + 1;\n\n    let stacks = [...this.state.stacks];\n    stacks[0].map( habit => {\n      habit.result = \"neutral\"\n    })\n\n    this.setState({ date : newDate })\n  }\n\n\n  //STORAGE\n  updateLocaLStorage = () => {\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      localStorage.setItem(\"Stacks\", JSON.stringify(this.state.stacks));\n      localStorage.setItem(\"Date\", JSON.stringify(this.state.date));\n  }\n  populateStateFromStorage = () => {\n    //use localStorage to re-populate state when app is refreshed\n    let newStack = JSON.parse(localStorage.getItem('Stacks'));\n    let newDate = JSON.parse(localStorage.getItem('Date'));\n\n    if (newStack) {\n      this.setState({ stacks : newStack})\n    }\n    if (newDate) {\n      this.setState({ date : newDate})\n    }\n  }\n  clearStorage = () => {\n    localStorage.clear();\n\n    //return habit circles to neutral for new day\n    let stacks = [...this.state.stacks];\n    stacks[0].map( habit => {\n      habit.result = \"neutral\"\n    })\n\n  }\n\n  componentDidMount() {\n\n\n    //populate storedHabit in state from localStorage from previous sessions\n    this.populateStateFromStorage();\n\n\n    //get the day\n    let fullDate = new Date();\n    let thisDay = fullDate.getDate();\n    let thisMonth = fullDate.getMonth();\n    let thisYear = fullDate.getYear();\n\n    let isSameDay = this.checkIsSameDay(thisDay, thisMonth, thisYear);\n\n    if (!isSameDay){\n      this.updateLocaLStorage();\n      this.resetForNewDay();\n      this.updateLastLoggedDate(thisDay, thisMonth, thisYear);\n    }\n  }\n\n\n  render() {\n\n\n    return (\n      <AppStyled>\n\n        <Typography />\n        <GlobalStyles />\n\n        <ViewStacks\n          stacks={this.state}\n          stacksInfo={this.state.stacksInfo}\n          day={this.state.date.dayOfHabit}\n          toggleStack={this.toggleStack}\n          logHabit={this.logHabit}\n          onSortEnd={this.onSortEnd}\n          addHabit={this.addHabit}\n          toggleAddMode={this.toggleAddMode}\n          activeStates={this.state.activeStates}\n          nextDay={this.resetForNewDay}\n          clearStorage={this.clearStorage}\n        />\n\n      </AppStyled>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}