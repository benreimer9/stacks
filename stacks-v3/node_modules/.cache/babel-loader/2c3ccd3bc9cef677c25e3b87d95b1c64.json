{"ast":null,"code":"import _objectSpread from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _taggedTemplateLiteral from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/benreimer/Develop/stacks/stacks-v3/src/App.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  h3, h4 {\\n    font-family : 'Poppins';\\n    font-weight : 700;\\n  }\\n  body {\\n    font-family: 'Roboto';\\n    font-weight: 400;\\n    height: 100%;\\n  }\\n  html {\\n    font-size: 16px;\\n    overflow: scroll;\\n    overflow-x: hidden;\\n    height: 100%;\\n  }\\n  ::-webkit-scrollbar {\\n    width: 0px;  /* remove scrollbar space */\\n    background: transparent;  /* optional: just make scrollbar invisible */\\n  }\\n  button {\\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\\n      border-radius: 6px;\\n      height: 30px;\\n      // width:85px;\\n      padding-top: 4px;\\n      padding-left: 13px;\\n      padding-right: 13px;\\n      font-family: Poppins;\\n      font-weight: 500;\\n      font-size: 1rem;\\n      color: #3D3D3D;\\n      text-align: center;\\n      transition: width .2s;\\n      -webkit-touch-callout: none; /* iOS Safari */\\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\\n      -khtml-user-select: none; /* Konqueror */\\n      -moz-user-select: none; /* Firefox */\\n      -ms-user-select: none; /* Internet Explorer/Edge */\\n       user-select: none;\\n  }\\n  button:focus{\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position:relative;\\n  overflow:hidden;\\n  width:100%;\\n  height: 100%;\\n  max-width: 500px;\\n  margin: 0 auto;\\n  display: block;\\n  padding-top: 100px;\\n\\n  @media(min-width:769px){\\n    .App {\\n      margin-top: 40px;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styled, { createGlobalStyle } from 'styled-components';\n/**************\nTO DO\n\n\n!- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n\n- How will dayOfHabit handle habits starting on way later dates? lots of null array items?\n- Ability to add a new stack\n- Ability to rearrange stacks (under info)\n- Add new habits (use formik)\n- stack bar color when all complete\n- Streak counter 'working'\n- 'Edit' button\n\n\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nvar AppStyled = styled.div(_templateObject());\nvar Typography = createGlobalStyle(_templateObject2());\nvar GlobalStyles = createGlobalStyle(_templateObject3());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stacks: [[//stack 1\n      {\n        action: \"Meditate 15mins\",\n        cue: \"7:00am\",\n        result: \"neutral\",\n        log: {}\n      }, {\n        action: \"Exercise\",\n        cue: \"then\",\n        result: \"neutral\",\n        log: {}\n      }]],\n      stacksInfo: [{\n        name: \"Routine One\",\n        streak: 0,\n        todayStreakChange: 0,\n        height: \"auto\"\n      }],\n      date: {\n        lastLoggedDate: null,\n        // day/month/year\n        visualDate: null\n      },\n      activeStates: {\n        addModeIsActive: false,\n        addModuleIsActive: false,\n        editModeIsActive: false\n      },\n      debug: {\n        debugMode: true,\n        addDay: false,\n        addCounter: 0\n      }\n    };\n\n    _this.habitResultHandler = function (result) {\n      switch (result) {\n        case \"neutral\":\n          return \"complete\";\n\n        case \"complete\":\n          return \"miss\";\n\n        case \"miss\":\n          return \"skip\";\n\n        case \"skip\":\n          return \"neutral\";\n\n        default:\n          return \"neutral\";\n      }\n    };\n\n    _this.habitEasyComplete = function (itemId, stackId) {\n      //turn earlier habits in stack into 'complete' if they're neutral\n      var stack = _toConsumableArray(_this.state.stacks[stackId]);\n\n      for (var i = 0; i < stack.length; i++) {\n        if (itemId > i && stack[i].result === \"neutral\") {\n          _this.logHabit(i, stackId);\n        }\n      }\n    };\n\n    _this.logHabit = function (itemId, stackId) {\n      var newStacks = _toConsumableArray(_this.state.stacks);\n\n      var habitToUpdate = newStacks[stackId][itemId];\n      var result = habitToUpdate.result; //neutral, complete, miss, etc.\n\n      var updatedResult = _this.habitResultHandler(result); //toggle to next result\n\n\n      var shouldUpdateStreakCounter = false;\n\n      if (updatedResult === \"complete\") {\n        _this.habitEasyComplete(itemId, stackId);\n      } //if last habit is logged with any result, update streakcounter\n\n\n      var lastHabitInStack = newStacks[stackId].length - 1;\n\n      if (newStacks[stackId][lastHabitInStack].result !== null) {\n        shouldUpdateStreakCounter = true;\n      }\n\n      habitToUpdate.result = updatedResult; //add habit to the habit's log\n\n      var today = _this.state.date.lastLoggedDate;\n      habitToUpdate.log[today] = updatedResult;\n\n      _this.setState({\n        stacks: newStacks\n      }, function stateUpdateComplete() {\n        this.updateLocaLStorage();\n\n        if (shouldUpdateStreakCounter) {\n          this.updateStreakCounter(stackId);\n        }\n\n        ;\n      });\n    };\n\n    _this.addHabit = function (stackId) {\n      var newStack = _toConsumableArray(_this.state.stacks);\n\n      var activeStates = _this.state.activeStates;\n      var newActiveStates = activeStates;\n      newActiveStates.addModuleIsActive = true;\n\n      _this.setState({\n        activeStates: newActiveStates\n      });\n\n      var cue = prompt(\"Cue : \");\n      var action = prompt(\"Action : \");\n      newStack[stackId].push({\n        action: action,\n        cue: cue,\n        result: \"neutral\",\n        log: {}\n      });\n\n      _this.setState({\n        stacks: newStack\n      });\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.updateStreakCounter = function (stackId) {\n      var stacksInfo = _objectSpread({}, _this.state.stacksInfo);\n\n      var finalResult = null;\n\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var streakChange = stacksInfo[stackId].todayStreakChange;\n\n      var stack = _toConsumableArray(_this.state.stacks[stackId]); //give a few seconds for users to log any misses / neutrals / skips\n      //go thru habits to decide what finalResult should be\n\n\n      setTimeout(function () {\n        for (var i = 0; i < stack.length; i++) {\n          if (stack[i].result === \"complete\" && finalResult !== \"failed\" && finalResult !== \"incomplete\") {\n            finalResult = \"completed\";\n          } else if (stack[i].result === \"miss\") {\n            finalResult = \"failed\";\n          } else if (stack[i].result === \"skip\") {\n            finalResult = \"completed\";\n          } else if (stack[i].result === \"neutral\") {\n            //catch any neutrals -- this means logging for the day isn't done yet\n            finalResult = \"incomplete\";\n          }\n        }\n\n        if (finalResult === \"failed\") {\n          stacksInfo[stackId].streak--;\n        }\n\n        if (finalResult === \"completed\") {\n          stacksInfo[stackId].streak++;\n        }\n\n        that.setState({\n          stacksInfo: stacksInfo\n        });\n      }, 2000);\n    };\n\n    _this.toggleStack = function (id) {\n      var toggleStack = _this.state.stacksInfo[id];\n      var newStack = toggleStack;\n      newStack.height = toggleStack.height === 0 ? 'auto' : 0;\n\n      _this.setState({\n        toggleStack: newStack\n      });\n    };\n\n    _this.toggleAddMode = function () {\n      var activeState = _this.state.activeStates;\n      var newActiveState = activeState;\n      newActiveState.addModeIsActive = !activeState.addModeIsActive;\n\n      _this.setState({\n        activeState: newActiveState\n      });\n    };\n\n    _this.onSortEnd = function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex,\n          collection = _ref.collection;\n\n      _this.setState(function (_ref2) {\n        var stacks = _ref2.stacks;\n\n        var newstacks = _toConsumableArray(stacks);\n\n        newstacks[collection] = arrayMove(stacks[collection], oldIndex, newIndex);\n        return {\n          stacks: newstacks\n        };\n      });\n    };\n\n    _this.visualDate = function (day, month) {\n      var today = null;\n\n      switch (month) {\n        case '0':\n          today = \"Jan \" + day;\n          break;\n\n        case '1':\n          today = \"Feb \" + day;\n          break;\n\n        case '2':\n          today = \"March \" + day;\n          break;\n\n        case '3':\n          today = \"April \" + day;\n          break;\n\n        case '4':\n          today = \"May \" + day;\n          break;\n\n        case '5':\n          today = \"June \" + day;\n          break;\n\n        case '6':\n          today = \"July \" + day;\n          break;\n\n        case '7':\n          today = \"Aug \" + day;\n          break;\n\n        case '8':\n          today = \"Sept \" + day;\n          break;\n\n        case '9':\n          today = \"Oct \" + day;\n          break;\n\n        case '10':\n          today = \"Nov \" + day;\n          break;\n\n        case '11':\n          today = \"Dec \" + day;\n          break;\n      }\n\n      return today;\n    };\n\n    _this.isNewDay = function () {\n      var date = _objectSpread({}, _this.state.date);\n\n      var lastLoggedDate = date.lastLoggedDate; //get the day\n\n      var fullDate = new Date();\n      var thisDay = fullDate.getDate().toString();\n      var thisMonth = fullDate.getMonth().toString();\n      var thisYear = fullDate.getFullYear().toString(); //Debug : force add a day for testing\n\n      if (_this.state.debug.debugMode) {\n        thisDay = fullDate.getDate() + _this.state.debug.addCounter;\n        thisDay = thisDay.toString();\n\n        if (_this.state.debug.addDay) {\n          console.log(\"day is forced to next\");\n\n          var debug = _objectSpread({}, _this.state.debug);\n\n          debug.addCounter++;\n          debug.addDay = false;\n\n          _this.setState({\n            debug: debug\n          });\n\n          _this.resetForNewDay();\n        }\n      }\n\n      var currentDate = thisDay + \"/\" + thisMonth + \"/\" + thisYear;\n\n      var visDate = _this.visualDate(thisDay, thisMonth);\n\n      if (lastLoggedDate === currentDate) {\n        return false;\n      } else {\n        date.lastLoggedDate = currentDate;\n        date.visualDate = visDate;\n\n        _this.setState({\n          date: date\n        });\n\n        return true;\n      }\n    };\n\n    _this.resetForNewDay = function () {\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks[0].map(function (habit) {\n        habit.result = \"neutral\";\n      });\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.forceNextDay = function () {\n      var debug = _objectSpread({}, _this.state.debug);\n\n      debug.addDay = true;\n\n      _this.setState({\n        debug: debug\n      });\n    };\n\n    _this.updateLocaLStorage = function () {\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      localStorage.setItem(\"Stacks\", JSON.stringify(_this.state.stacks));\n      localStorage.setItem(\"Date\", JSON.stringify(_this.state.date));\n    };\n\n    _this.populateStateFromStorage = function () {\n      //use localStorage to re-populate state when app is refreshed\n      var newStack = JSON.parse(localStorage.getItem('Stacks'));\n      var newDate = JSON.parse(localStorage.getItem('Date'));\n\n      if (newStack) {\n        _this.setState({\n          stacks: newStack\n        });\n      }\n\n      if (newDate) {\n        _this.setState({\n          date: newDate\n        });\n      }\n    };\n\n    _this.clearStorage = function () {\n      localStorage.clear(); //return habit circles to neutral for new day\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks[0].map(function (habit) {\n        habit.result = \"neutral\";\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        return _this2.isNewDay();\n      }, 60000);\n      this.populateStateFromStorage();\n\n      if (this.isNewDay) {\n        this.resetForNewDay();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //check every minute if it's the same day\n      var context = this;\n      setTimeout(function () {\n        if (context.isNewDay()) {\n          //do new day stuff\n          context.resetForNewDay();\n        }\n      }, 1000);\n      return React.createElement(AppStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }), React.createElement(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }), React.createElement(ViewStacks, {\n        stacks: this.state,\n        stacksInfo: this.state.stacksInfo,\n        day: this.state.date.visualDate,\n        toggleStack: this.toggleStack,\n        logHabit: this.logHabit,\n        onSortEnd: this.onSortEnd,\n        addHabit: this.addHabit,\n        toggleAddMode: this.toggleAddMode,\n        activeStates: this.state.activeStates,\n        nextDay: this.forceNextDay,\n        clearStorage: this.clearStorage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/benreimer/Develop/stacks/stacks-v3/src/App.js"],"names":["React","Component","ViewStacks","arrayMove","styled","createGlobalStyle","AppStyled","div","Typography","GlobalStyles","App","state","stacks","action","cue","result","log","stacksInfo","name","streak","todayStreakChange","height","date","lastLoggedDate","visualDate","activeStates","addModeIsActive","addModuleIsActive","editModeIsActive","debug","debugMode","addDay","addCounter","habitResultHandler","habitEasyComplete","itemId","stackId","stack","i","length","logHabit","newStacks","habitToUpdate","updatedResult","shouldUpdateStreakCounter","lastHabitInStack","today","setState","stateUpdateComplete","updateLocaLStorage","updateStreakCounter","addHabit","newStack","newActiveStates","prompt","push","finalResult","that","streakChange","setTimeout","toggleStack","id","toggleAddMode","activeState","newActiveState","onSortEnd","oldIndex","newIndex","collection","newstacks","day","month","isNewDay","fullDate","Date","thisDay","getDate","toString","thisMonth","getMonth","thisYear","getFullYear","console","resetForNewDay","currentDate","visDate","map","habit","forceNextDay","localStorage","setItem","JSON","stringify","populateStateFromStorage","parse","getItem","newDate","clearStorage","clear","interval","setInterval","clearInterval","context"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styled, {createGlobalStyle} from 'styled-components';\n\n/**************\nTO DO\n\n\n!- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n\n- How will dayOfHabit handle habits starting on way later dates? lots of null array items?\n- Ability to add a new stack\n- Ability to rearrange stacks (under info)\n- Add new habits (use formik)\n- stack bar color when all complete\n- Streak counter 'working'\n- 'Edit' button\n\n\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nconst AppStyled = styled.div`\n  position:relative;\n  overflow:hidden;\n  width:100%;\n  height: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n  display: block;\n  padding-top: 100px;\n\n  @media(min-width:769px){\n    .App {\n      margin-top: 40px;\n    }\n  }\n`\nconst Typography = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\n`;\nconst GlobalStyles = createGlobalStyle`\n  h3, h4 {\n    font-family : 'Poppins';\n    font-weight : 700;\n  }\n  body {\n    font-family: 'Roboto';\n    font-weight: 400;\n    height: 100%;\n  }\n  html {\n    font-size: 16px;\n    overflow: scroll;\n    overflow-x: hidden;\n    height: 100%;\n  }\n  ::-webkit-scrollbar {\n    width: 0px;  /* remove scrollbar space */\n    background: transparent;  /* optional: just make scrollbar invisible */\n  }\n  button {\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\n      border-radius: 6px;\n      height: 30px;\n      // width:85px;\n      padding-top: 4px;\n      padding-left: 13px;\n      padding-right: 13px;\n      font-family: Poppins;\n      font-weight: 500;\n      font-size: 1rem;\n      color: #3D3D3D;\n      text-align: center;\n      transition: width .2s;\n      -webkit-touch-callout: none; /* iOS Safari */\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\n      -khtml-user-select: none; /* Konqueror */\n      -moz-user-select: none; /* Firefox */\n      -ms-user-select: none; /* Internet Explorer/Edge */\n       user-select: none;\n  }\n  button:focus{\n    outline: none;\n  }\n`;\n\n\n\nclass App extends Component {\n\n\n\n  state = {\n    stacks : [\n      [ //stack 1\n        {\n          action : \"Meditate 15mins\",\n          cue: \"7:00am\",\n          result: \"neutral\",\n          log : {},\n        },\n        {\n          action:\"Exercise\",\n          cue:\"then\",\n          result: \"neutral\",\n          log : {},\n        },\n      ],\n    ],\n    stacksInfo : [\n      { name : \"Routine One\", streak: 0, todayStreakChange:0, height : \"auto\", },\n    ],\n    date : {\n      lastLoggedDate : null, // day/month/year\n      visualDate : null,\n    },\n    activeStates : {\n      addModeIsActive : false,\n      addModuleIsActive : false,\n      editModeIsActive : false,\n    },\n    debug : {\n      debugMode : true,\n      addDay : false,\n      addCounter : 0,\n    }\n  };\n\n\n  //HABITS\n  habitResultHandler = (result) => {\n    switch (result){\n      case \"neutral\" :\n        return \"complete\";\n      case \"complete\" :\n        return \"miss\";\n      case \"miss\" :\n        return \"skip\";\n      case \"skip\" :\n        return \"neutral\";\n      default :\n        return \"neutral\";\n    }\n  }\n  habitEasyComplete = (itemId, stackId) => {\n    //turn earlier habits in stack into 'complete' if they're neutral\n\n    let stack = [...this.state.stacks[stackId]];\n    for (var i = 0; i < stack.length; i++) {\n      if (itemId > i && stack[i].result === \"neutral\"){\n        this.logHabit(i, stackId)\n      }\n    }\n  }\n\n  logHabit = (itemId, stackId) => {\n\n    let newStacks = [...this.state.stacks];\n    let habitToUpdate = newStacks[stackId][itemId];\n    let result = habitToUpdate.result; //neutral, complete, miss, etc.\n    let updatedResult = this.habitResultHandler(result); //toggle to next result\n    let shouldUpdateStreakCounter = false;\n\n    if (updatedResult === \"complete\"){\n      this.habitEasyComplete(itemId, stackId);\n    }\n    //if last habit is logged with any result, update streakcounter\n    let lastHabitInStack = newStacks[stackId].length-1;\n    if (newStacks[stackId][lastHabitInStack].result !== null){\n      shouldUpdateStreakCounter = true;\n    }\n\n    habitToUpdate.result = updatedResult;\n\n    //add habit to the habit's log\n    let today = this.state.date.lastLoggedDate;\n    habitToUpdate.log[today] = updatedResult;\n\n\n    this.setState({stacks : newStacks}, function stateUpdateComplete(){\n      this.updateLocaLStorage();\n      if (shouldUpdateStreakCounter) {\n        this.updateStreakCounter(stackId)\n      };\n    })\n\n  }\n  addHabit = (stackId) => {\n\n    const newStack = [...this.state.stacks]\n\n    const activeStates = this.state.activeStates;\n    const newActiveStates = activeStates;\n\n    newActiveStates.addModuleIsActive = true;\n    this.setState({ activeStates : newActiveStates })\n\n    let cue = prompt(\"Cue : \");\n    let action = prompt(\"Action : \");\n    newStack[stackId].push(\n      {\n        action : action,\n        cue: cue,\n        result: \"neutral\",\n        log : {},\n      }\n    )\n\n    this.setState({stacks : newStack})\n    this.updateLocaLStorage();\n  }\n\n\n  //STREAKS\n\n  updateStreakCounter = (stackId) => {\n    let stacksInfo = {...this.state.stacksInfo};\n    let finalResult = null;\n    let that = this;\n    let streakChange = stacksInfo[stackId].todayStreakChange;\n    let stack = [...this.state.stacks[stackId]];\n\n    //give a few seconds for users to log any misses / neutrals / skips\n    //go thru habits to decide what finalResult should be\n    setTimeout(function () {\n      for (var i = 0; i < stack.length; i++) {\n\n        if (stack[i].result === \"complete\" && finalResult !== \"failed\" && finalResult !== \"incomplete\"){\n          finalResult = \"completed\";\n        }\n        else if(stack[i].result === \"miss\"){\n          finalResult = \"failed\";\n        }\n        else if (stack[i].result === \"skip\"){\n          finalResult = \"completed\";\n        }\n        else if (stack[i].result === \"neutral\"){\n          //catch any neutrals -- this means logging for the day isn't done yet\n          finalResult = \"incomplete\";\n        }\n      }\n\n      if (finalResult === \"failed\"){\n\n        stacksInfo[stackId].streak--;\n      }\n      if (finalResult === \"completed\"){\n        stacksInfo[stackId].streak++;\n      }\n\n      that.setState({stacksInfo : stacksInfo})\n    }, 2000);\n\n\n  }\n\n\n  //OTHER\n  toggleStack = (id) => {\n    let toggleStack = this.state.stacksInfo[id];\n    let newStack = toggleStack;\n\n    newStack.height = toggleStack.height === 0 ? 'auto' : 0;\n\n    this.setState({\n      toggleStack : newStack\n    })\n  }\n  toggleAddMode = () => {\n    const activeState = this.state.activeStates;\n    const newActiveState = activeState;\n    newActiveState.addModeIsActive = !activeState.addModeIsActive;\n    this.setState({ activeState : newActiveState})\n  }\n  onSortEnd = ({oldIndex, newIndex, collection}) => {\n    this.setState(({stacks}) => {\n      const newstacks = [...stacks];\n\n      newstacks[collection] = arrayMove(\n        stacks[collection],\n        oldIndex,\n        newIndex,\n      );\n      return {stacks: newstacks};\n    });\n  };\n\n\n  //DAY-RELATED\n\n  visualDate = (day, month) => {\n    let today = null;\n\n    switch (month) {\n      case '0' :\n        today = \"Jan \" + day;\n        break;\n      case '1' :\n        today = \"Feb \" + day;\n        break;\n      case '2' :\n        today = \"March \" + day;\n        break;\n      case '3' :\n        today = \"April \" + day;\n        break;\n      case '4' :\n        today = \"May \" + day;\n        break;\n      case '5' :\n        today = \"June \" + day;\n        break;\n      case '6' :\n        today = \"July \" + day;\n        break;\n      case '7' :\n        today = \"Aug \" + day;\n        break;\n      case '8' :\n        today = \"Sept \" + day;\n        break;\n      case '9' :\n        today = \"Oct \" + day;\n        break;\n      case '10' :\n        today = \"Nov \" + day;\n        break;\n      case '11' :\n        today = \"Dec \" + day;\n        break;\n    }\n    return today;\n  }\n  isNewDay = () => {\n    let date = {...this.state.date}\n    let lastLoggedDate = date.lastLoggedDate;\n\n    //get the day\n    let fullDate = new Date();\n    let thisDay = fullDate.getDate().toString();\n    let thisMonth = fullDate.getMonth().toString();\n    let thisYear = fullDate.getFullYear().toString();\n\n    //Debug : force add a day for testing\n    if (this.state.debug.debugMode){\n\n      thisDay = fullDate.getDate() + this.state.debug.addCounter;\n      thisDay = thisDay.toString();\n\n      if (this.state.debug.addDay){\n        console.log(\"day is forced to next\");\n        let debug = {...this.state.debug};\n        debug.addCounter++;\n        debug.addDay = false;\n        this.setState({debug : debug})\n        this.resetForNewDay();\n      }\n    }\n\n\n    let currentDate = thisDay + \"/\" + thisMonth + \"/\" + thisYear;\n    let visDate = this.visualDate(thisDay, thisMonth);\n\n\n    if (lastLoggedDate === currentDate){\n      return false;\n    }\n    else {\n      date.lastLoggedDate = currentDate;\n      date.visualDate = visDate;\n      this.setState({ date : date})\n      return true;\n    }\n\n  }\n  resetForNewDay = () => {\n\n    let stacks = [...this.state.stacks];\n    stacks[0].map( habit => {\n      habit.result = \"neutral\"\n    })\n\n    this.updateLocaLStorage();\n\n  }\n  forceNextDay = () => {\n    let debug = {...this.state.debug};\n    debug.addDay = true;\n    this.setState({debug : debug})\n  }\n\n\n  //STORAGE\n  updateLocaLStorage = () => {\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      localStorage.setItem(\"Stacks\", JSON.stringify(this.state.stacks));\n      localStorage.setItem(\"Date\", JSON.stringify(this.state.date));\n  }\n  populateStateFromStorage = () => {\n    //use localStorage to re-populate state when app is refreshed\n    let newStack = JSON.parse(localStorage.getItem('Stacks'));\n    let newDate = JSON.parse(localStorage.getItem('Date'));\n\n    if (newStack) {\n      this.setState({ stacks : newStack})\n    }\n    if (newDate) {\n      this.setState({ date : newDate})\n    }\n  }\n  clearStorage = () => {\n    localStorage.clear();\n\n    //return habit circles to neutral for new day\n    let stacks = [...this.state.stacks];\n    stacks[0].map( habit => {\n      habit.result = \"neutral\"\n    })\n\n  }\n\n  componentDidMount() {\n\n    this.interval = setInterval(() => this.isNewDay(), 60000);\n\n    this.populateStateFromStorage();\n    if (this.isNewDay) {\n      this.resetForNewDay();\n    }\n\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n\n  render() {\n\n    //check every minute if it's the same day\n    let context = this;\n    setTimeout(function () {\n      if (context.isNewDay()){\n        //do new day stuff\n        context.resetForNewDay();\n      }\n    }, 1000);\n\n    return (\n      <AppStyled>\n\n        <Typography />\n        <GlobalStyles />\n\n        <ViewStacks\n          stacks={this.state}\n          stacksInfo={this.state.stacksInfo}\n          day={this.state.date.visualDate}\n          toggleStack={this.toggleStack}\n          logHabit={this.logHabit}\n          onSortEnd={this.onSortEnd}\n          addHabit={this.addHabit}\n          toggleAddMode={this.toggleAddMode}\n          activeStates={this.state.activeStates}\n          nextDay={this.forceNextDay}\n          clearStorage={this.clearStorage}\n        />\n\n      </AppStyled>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}