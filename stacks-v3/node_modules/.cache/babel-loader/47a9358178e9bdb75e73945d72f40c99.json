{"ast":null,"code":"// '/index.html',\n// '/static/css/main.71bb5dc8.chunk.css',\n// '/static/js/1.3101dea3.chunk.js',\n// '/static/js/main.d494b740.chunk.js',\n// '/static/js/runtime~main.229c360f.js'\nexport function register() {\n  // Step 1 : Register\n  var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/sw.js\");\n\n  if (navigator.serviceWorker) {\n    navigator.serviceWorker.register(swUrl).then(function (registration) {}).catch(console.log);\n  } // Service Worker\n  // const pwaCache = 'pwa-cache-1';\n  //\n  //\n  // //set up the cache on installing SW\n  // window.addEventListener('install', e => {\n  //\n  //\n  //   let cacheReady = caches.open(pwaCache).then( cache => {\n  //     console.log('new cache ready');\n  //     return cache.addAll([\n  //\n  //     ]);\n  //   })\n  //\n  //   e.waitUntil(cacheReady)\n  // })\n  //\n  //\n  // //listen to activate to clean up old caches\n  //\n  // window.addEventListener('activate', e => {\n  //\n  //   let cachesCleaned = caches.keys().then( keys => {\n  //     keys.forEach(key => {\n  //       if (key !== pwaCache) {\n  //         return caches.delete(key)\n  //       }\n  //     })\n  //   })\n  //   e.waitUntil(cachesCleaned);\n  // })\n  //\n  //\n  // //send cached stuff when fetches are called\n  //\n  //\n  // window.addEventListener('fetch', e => {\n  //\n  //   //if not local, don't bother trying to get from cache\n  //   if ( !e.request.url === window.location.origin) return;\n  //\n  //   //is local, lets get from cache\n  //   let newRes = caches.open(pwaCache).then( cache => {\n  //     return cache.match(e.request).then( res => {\n  //\n  //       //check request was found in cache\n  //       if (res) {\n  //         console.log(`Serving ${res.url} from cache`);\n  //         return res;\n  //       }\n  //\n  //       //fetch on behalf of client and then cache\n  //       return fetch(e.request).then( fetchRes => {\n  //\n  //         //next line is complicated.\n  //         //shouldnt just use add() bc that calls a fetch, unnecessary\n  //         //need to clone since fetchRes can only be consumed once\n  //         cache.put(e.request, fetchRes.clone())\n  //         return fetchRes;\n  //       })\n  //\n  //     });\n  //   })\n  //   e.respondWith(newRes);\n  //\n  // })\n  //\n\n}","map":{"version":3,"sources":["/Users/benreimer/Develop/stacks/stacks-v3/src/sw.js"],"names":["register","swUrl","process","env","PUBLIC_URL","navigator","serviceWorker","then","registration","catch","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA,OAAO,SAASA,QAAT,GAAmB;AAE1B;AACE,MAAMC,KAAK,aAAMC,OAAO,CAACC,GAAR,CAAYC,UAAlB,WAAX;;AAEA,MAAIC,SAAS,CAACC,aAAd,EAA6B;AAC3BD,IAAAA,SAAS,CAACC,aAAV,CAAwBN,QAAxB,CAAiCC,KAAjC,EAAwCM,IAAxC,CAA6C,UAACC,YAAD,EAAkB,CAC9D,CADD,EACGC,KADH,CACSC,OAAO,CAACC,GADjB;AAED,GARuB,CAW1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC","sourcesContent":["// '/index.html',\n// '/static/css/main.71bb5dc8.chunk.css',\n// '/static/js/1.3101dea3.chunk.js',\n// '/static/js/main.d494b740.chunk.js',\n// '/static/js/runtime~main.229c360f.js'\n\n\nexport function register(){\n\n// Step 1 : Register\n  const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n  if (navigator.serviceWorker) {\n    navigator.serviceWorker.register(swUrl).then((registration) => {\n    }).catch(console.log);\n  }\n\n\n// Service Worker\n// const pwaCache = 'pwa-cache-1';\n//\n//\n// //set up the cache on installing SW\n// window.addEventListener('install', e => {\n//\n//\n//   let cacheReady = caches.open(pwaCache).then( cache => {\n//     console.log('new cache ready');\n//     return cache.addAll([\n//\n//     ]);\n//   })\n//\n//   e.waitUntil(cacheReady)\n// })\n//\n//\n// //listen to activate to clean up old caches\n//\n// window.addEventListener('activate', e => {\n//\n//   let cachesCleaned = caches.keys().then( keys => {\n//     keys.forEach(key => {\n//       if (key !== pwaCache) {\n//         return caches.delete(key)\n//       }\n//     })\n//   })\n//   e.waitUntil(cachesCleaned);\n// })\n//\n//\n// //send cached stuff when fetches are called\n//\n//\n// window.addEventListener('fetch', e => {\n//\n//   //if not local, don't bother trying to get from cache\n//   if ( !e.request.url === window.location.origin) return;\n//\n//   //is local, lets get from cache\n//   let newRes = caches.open(pwaCache).then( cache => {\n//     return cache.match(e.request).then( res => {\n//\n//       //check request was found in cache\n//       if (res) {\n//         console.log(`Serving ${res.url} from cache`);\n//         return res;\n//       }\n//\n//       //fetch on behalf of client and then cache\n//       return fetch(e.request).then( fetchRes => {\n//\n//         //next line is complicated.\n//         //shouldnt just use add() bc that calls a fetch, unnecessary\n//         //need to clone since fetchRes can only be consumed once\n//         cache.put(e.request, fetchRes.clone())\n//         return fetchRes;\n//       })\n//\n//     });\n//   })\n//   e.respondWith(newRes);\n//\n// })\n//\n}\n"]},"metadata":{},"sourceType":"module"}