{"ast":null,"code":"import _objectSpread from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/benreimer/Develop/stacks/stacks-v3/src/App.js\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  position:absolute;\\n  width:100%;\\n  bottom: 70px;\\n  z-index:10;\\n  padding-left: 5px;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  h3, h4 {\\n    font-family : 'Poppins';\\n    font-weight : 700;\\n  }\\n  body {\\n    font-family: 'Roboto';\\n    font-weight: 400;\\n    height: 100%;\\n  }\\n  html {\\n    font-size: 16px;\\n    overflow: scroll;\\n    overflow-x: hidden;\\n    height: 100%;\\n  }\\n  ::-webkit-scrollbar {\\n    width: 0px;  /* remove scrollbar space */\\n    background: transparent;  /* optional: just make scrollbar invisible */\\n  }\\n  button {\\n      display: block;\\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\\n      border-radius: 4px;\\n      height: 30px;\\n      // width:85px;\\n      padding-top: 4px;\\n      padding-left: 13px;\\n      padding-right: 13px;\\n      font-family: Poppins;\\n      font-weight: 500;\\n      font-size: 1rem;\\n      color: #3D3D3D;\\n      text-align: center;\\n      transition: width .2s;\\n      -webkit-touch-callout: none; /* iOS Safari */\\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\\n      -khtml-user-select: none; /* Konqueror */\\n      -moz-user-select: none; /* Firefox */\\n      -ms-user-select: none; /* Internet Explorer/Edge */\\n       user-select: none;\\n  }\\n  button:focus{\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position:relative;\\n  width:100%;\\n  height: 100%;\\n  max-width: 500px;\\n  margin: 0 auto;\\n  display: block;\\n  padding-top: 100px;\\n\\n  @media(min-width:769px){\\n    .App {\\n      margin-top: 40px;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styled, { createGlobalStyle } from 'styled-components';\n/**************\nTO DO\n\nComponents\n\n- 'Edit' button\n- Error handling (PWA white screen is whenever react has an error. Could I have plain JS outside of react that appears\nletting users know there's an error?)\n- 'Miss' management component\n\n- stack bar color when all complete\n- Add days of the week to habits\n- Learn push messaging and add reminders to habits (or reminders to your stack)\n\n- make the android PWA download pop-up work\n- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n- animation for successes and misses\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nvar AppStyled = styled.div(_templateObject());\nvar Typography = createGlobalStyle(_templateObject2());\nvar GlobalStyles = createGlobalStyle(_templateObject3());\nvar DebugLog = styled.div(_templateObject4());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stacks: [\n        /*[ //stack 1\n          {\n            action : \"Meditate 15mins\",\n            cue: \"7:00am\",\n            result: \"neutral\",\n            log : {},\n          },\n        ],*/\n      ],\n      stacksInfo: [// { name : \"Routine One\", streak: 0, todayStreakChange:0, height : \"auto\", },\n      ],\n      date: {\n        lastLoggedDate: null,\n        // day/month/year\n        visualDate: null\n      },\n      activeStates: {\n        addModeIsActive: false,\n        addHabitModuleIsActive: false,\n        addStackModuleIsActive: false,\n        editModeIsActive: false\n      },\n      building: {\n        stackBeingAddedTo: 0 //defaults to first stack\n\n      },\n      debug: {\n        debugMode: true,\n        addDay: false,\n        addCounter: 0,\n        text: \" __ \",\n        textCounter: 0\n      }\n    };\n\n    _this.habitResultHandler = function (result) {\n      switch (result) {\n        case \"neutral\":\n          return \"complete\";\n\n        case \"complete\":\n          return \"miss\";\n\n        case \"miss\":\n          return \"skip\";\n\n        case \"skip\":\n          return \"neutral\";\n\n        default:\n          return \"neutral\";\n      }\n    };\n\n    _this.habitEasyComplete = function (itemId, stackId) {\n      //turn earlier habits in stack into 'complete' if they're neutral\n      var stack = _toConsumableArray(_this.state.stacks[stackId]);\n\n      for (var i = 0; i < stack.length; i++) {\n        if (itemId > i && stack[i].result === \"neutral\") {\n          _this.logHabit(i, stackId);\n        }\n      }\n    };\n\n    _this.logHabit = function (itemId, stackId) {\n      var newStacks = _toConsumableArray(_this.state.stacks);\n\n      var habitToUpdate = newStacks[stackId][itemId];\n      var result = habitToUpdate.result; //neutral, complete, miss, etc.\n\n      var updatedResult = _this.habitResultHandler(result); //toggle to next result\n\n\n      var shouldUpdateStreakCounter = false;\n\n      if (updatedResult === \"complete\") {\n        _this.habitEasyComplete(itemId, stackId);\n      } //if last habit in a stack is logged with any result, update streakcounter\n\n\n      var lastHabitInStack = newStacks[stackId].length - 1;\n\n      if (newStacks[stackId][lastHabitInStack].result !== null) {\n        shouldUpdateStreakCounter = true;\n      }\n\n      habitToUpdate.result = updatedResult; //add habit to the habit's log\n\n      var today = _this.state.date.lastLoggedDate;\n      habitToUpdate.log[today] = updatedResult;\n\n      _this.setState({\n        stacks: newStacks\n      }, function stateUpdateComplete() {\n        this.updateLocaLStorage();\n\n        if (shouldUpdateStreakCounter) {\n          this.updateStreakCounter(stackId);\n        }\n\n        ;\n      });\n    };\n\n    _this.addHabit = function (stackId) {\n      var activeStates = _objectSpread({}, _this.state.activeStates);\n\n      var building = _objectSpread({}, _this.state.building);\n\n      activeStates.addHabitModuleIsActive = true;\n      building.stackBeingAddedTo = stackId;\n\n      _this.setState({\n        activeStates: activeStates\n      });\n\n      _this.setState({\n        building: building\n      });\n    };\n\n    _this.addStack = function (stackId) {\n      var activeStates = _objectSpread({}, _this.state.activeStates);\n\n      var building = _objectSpread({}, _this.state.building);\n\n      activeStates.addStackModuleIsActive = true;\n      building.stackBeingAddedTo = stackId;\n\n      _this.setState({\n        activeStates: activeStates\n      });\n\n      _this.setState({\n        building: building\n      });\n    };\n\n    _this.addHabitFormSubmission = function (newHabit) {\n      var stackId = _this.state.building.stackBeingAddedTo;\n\n      var newStack = _toConsumableArray(_this.state.stacks);\n\n      var action = newHabit.action;\n      var cue = newHabit.cue;\n      newStack[stackId].push({\n        action: action,\n        cue: cue,\n        result: \"neutral\",\n        log: {}\n      });\n\n      var building = _objectSpread({}, _this.state.building);\n\n      building.stackBeingAddedTo = 0; //defaults to first stack\n\n      _this.setState({\n        building: building\n      });\n\n      _this.setState({\n        stacks: newStack\n      });\n\n      _this.updateLocaLStorage();\n\n      _this.cancelActiveModules();\n\n      _this.toggleAddMode();\n    };\n\n    _this.addStackFormSubmission = function (newStack) {\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      stacksInfo.push({\n        name: newStack.stackName,\n        streak: 0,\n        todayStreakChange: 0,\n        height: \"auto\"\n      });\n      stacks.push([]);\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n\n      _this.setState({\n        stacks: stacks\n      });\n\n      _this.cancelActiveModules();\n\n      _this.toggleAddMode();\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.updateStreakCounter = function (stackId) {\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      var finalResult = null;\n      var streakChange = stacksInfo[stackId].todayStreakChange;\n\n      var stack = _toConsumableArray(_this.state.stacks[stackId]);\n\n      for (var i = 0; i < stack.length; i++) {\n        if (stack[i].result === \"complete\" && finalResult !== \"failed\" && finalResult !== \"incomplete\") {\n          finalResult = \"completed\";\n        } else if (stack[i].result === \"miss\") {\n          finalResult = \"failed\";\n        } else if (stack[i].result === \"skip\" && finalResult !== \"failed\" && finalResult !== \"incomplete\") {\n          finalResult = \"completed\";\n        } else if (stack[i].result === \"neutral\") {\n          //catch any neutrals -- this means logging for the day isn't done yet\n          finalResult = \"incomplete\";\n        }\n      }\n\n      if (finalResult === \"failed\") {\n        if (streakChange !== -1) {\n          //only remove 1 if it hasn't already today\n          if (stacksInfo[stackId].streak !== 0) {\n            //don't let it go into negatives when streak is at 0\n            stacksInfo[stackId].streak--;\n            streakChange = -1;\n          }\n        }\n      }\n\n      if (finalResult === \"completed\") {\n        if (streakChange !== 1) {\n          stacksInfo[stackId].streak++;\n          streakChange = 1;\n        }\n      }\n\n      stacksInfo[stackId].todayStreakChange = streakChange;\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n    };\n\n    _this.newDayUpdateStreakCounter = function () {\n      //check for any incompletes from yesterday and mark as failed\n      //this should run right before the resetForNewDay() does\n      console.log(\"Running newDayUpdateStreakCounter\");\n\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      var thereAreNeutralHabits = false;\n      stacks.map(function (stack, index) {\n        for (var i = 0; i < stack.length; i++) {\n          if (stack[i].result === \"neutral\") {\n            //catch any neutrals -- this means logging for the day isn't done yet\n            thereAreNeutralHabits = true;\n            console.log(\"found a neutral habit\");\n          }\n        }\n\n        if (thereAreNeutralHabits) {\n          console.log(\"#1\");\n\n          if (stacksInfo[index].todayStreakChange !== -1) {\n            //only remove 1 if it hasn't already today\n            console.log(\"#2\");\n\n            if (stacksInfo[index].streak !== 0) {\n              //don't let it go into negatives when streak is at 0\n              console.log(\"#3\");\n              stacksInfo[index].streak--;\n              stacksInfo[index].todayStreakChange = -1;\n              console.log(\"-1 to streak counter \");\n            }\n          }\n        }\n      });\n\n      _this.setState({\n        stacksInfo: stacksInfo\n      });\n    };\n\n    _this.toggleStack = function (id) {\n      var toggleStack = _this.state.stacksInfo[id];\n      var newStack = toggleStack;\n      newStack.height = toggleStack.height === 0 ? 'auto' : 0;\n\n      _this.setState({\n        toggleStack: newStack\n      });\n    };\n\n    _this.toggleAddMode = function () {\n      var activeState = _this.state.activeStates;\n      activeState.addModeIsActive = !activeState.addModeIsActive;\n\n      _this.setState({\n        activeState: activeState\n      });\n    };\n\n    _this.cancelActiveModules = function () {\n      var activeStates = _objectSpread({}, _this.state.activeStates);\n\n      activeStates.addHabitModuleIsActive = false;\n      activeStates.addStackModuleIsActive = false;\n\n      _this.setState({\n        activeStates: activeStates\n      });\n    };\n\n    _this.onSortEnd = function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex,\n          collection = _ref.collection;\n\n      _this.setState(function (_ref2) {\n        var stacks = _ref2.stacks;\n\n        var newstacks = _toConsumableArray(stacks);\n\n        newstacks[collection] = arrayMove(stacks[collection], oldIndex, newIndex);\n        return {\n          stacks: newstacks\n        };\n      });\n    };\n\n    _this.visualDate = function (day, month) {\n      var today = null;\n\n      switch (month) {\n        case '0':\n          today = \"Jan \" + day;\n          break;\n\n        case '1':\n          today = \"Feb \" + day;\n          break;\n\n        case '2':\n          today = \"March \" + day;\n          break;\n\n        case '3':\n          today = \"April \" + day;\n          break;\n\n        case '4':\n          today = \"May \" + day;\n          break;\n\n        case '5':\n          today = \"June \" + day;\n          break;\n\n        case '6':\n          today = \"July \" + day;\n          break;\n\n        case '7':\n          today = \"Aug \" + day;\n          break;\n\n        case '8':\n          today = \"Sept \" + day;\n          break;\n\n        case '9':\n          today = \"Oct \" + day;\n          break;\n\n        case '10':\n          today = \"Nov \" + day;\n          break;\n\n        case '11':\n          today = \"Dec \" + day;\n          break;\n      }\n\n      return today;\n    };\n\n    _this.isNewDay = function () {\n      console.log(\"isNewDay()\");\n\n      var date = _objectSpread({}, _this.state.date);\n\n      var lastLoggedDate = date.lastLoggedDate; //get the day\n\n      var fullDate = new Date();\n      var thisDay = fullDate.getDate().toString();\n      var thisMonth = fullDate.getMonth().toString();\n      var thisYear = fullDate.getFullYear().toString(); //Debug : force add a day for testing\n\n      if (_this.state.debug.debugMode) {\n        thisDay = fullDate.getDate() + _this.state.debug.addCounter;\n        thisDay = thisDay.toString();\n\n        if (_this.state.debug.addDay) {\n          console.log(\"day is forced to next\");\n\n          var debug = _objectSpread({}, _this.state.debug);\n\n          debug.addCounter++;\n          debug.addDay = false;\n\n          _this.setState({\n            debug: debug\n          });\n\n          _this.newDayUpdateStreakCounter();\n\n          _this.resetForNewDay();\n        }\n      }\n\n      var currentDate = thisDay + \"/\" + thisMonth + \"/\" + thisYear;\n\n      var visDate = _this.visualDate(thisDay, thisMonth);\n\n      console.log(\"currentDate : \", currentDate);\n      console.log(\"lastLoggedDate : \", lastLoggedDate);\n\n      if (lastLoggedDate === currentDate) {\n        return false;\n      } else {\n        date.lastLoggedDate = currentDate;\n        date.visualDate = visDate;\n\n        _this.setState({\n          date: date\n        });\n\n        return true;\n      }\n    };\n\n    _this.resetForNewDay = function () {\n      console.log(\"resetForNewDay()\");\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      for (var i = 0; i < stacks.length; i++) {\n        _this.updateStreakCounter(i);\n      }\n\n      stacks.map(function (stack, index) {\n        stacks[index].map(function (habit) {\n          habit.result = \"neutral\";\n        });\n      });\n\n      var stacksInfo = _toConsumableArray(_this.state.stacksInfo);\n\n      stacksInfo.map(function (stackInfo) {\n        stackInfo.todayStreakChange = 0;\n      });\n\n      _this.updateLocaLStorage();\n    };\n\n    _this.forceNextDay = function () {\n      var debug = _objectSpread({}, _this.state.debug);\n\n      debug.addDay = true;\n\n      _this.setState({\n        debug: debug\n      });\n    };\n\n    _this.updateLocaLStorage = function () {\n      var newStackInfo = JSON.parse(localStorage.getItem('StacksInfo'));\n      console.log(\"updateLocaLStorage() - stacksinfo\", newStackInfo); //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n\n      localStorage.setItem(\"Stacks\", JSON.stringify(_this.state.stacks));\n      localStorage.setItem(\"StacksInfo\", JSON.stringify(_this.state.stacksInfo));\n      localStorage.setItem(\"Date\", JSON.stringify(_this.state.date));\n      localStorage.setItem(\"Debug\", JSON.stringify(_this.state.debug));\n\n      var debug = _objectSpread({}, _this.state.debug);\n\n      debug.text = \"Local updated at : \" + debug.textCounter;\n      debug.textCounter++;\n\n      _this.setState({\n        debug: debug\n      });\n    };\n\n    _this.populateStateFromStorage = function () {\n      console.log(\"populateStateFromStorage()\"); //use localStorage to re-populate state when app is refreshed\n\n      var newStack = JSON.parse(localStorage.getItem('Stacks'));\n      var newDate = JSON.parse(localStorage.getItem('Date'));\n      var newStackInfo = JSON.parse(localStorage.getItem('StacksInfo'));\n      var newDebug = JSON.parse(localStorage.getItem('Debug'));\n\n      if (newStack) {\n        _this.setState({\n          stacks: newStack\n        });\n      }\n\n      if (newDate) {\n        _this.setState({\n          date: newDate\n        });\n      }\n\n      if (newStackInfo) {\n        _this.setState({\n          stacksInfo: newStackInfo\n        });\n      }\n\n      if (newDebug) {\n        _this.setState({\n          debug: newDebug\n        });\n      }\n    };\n\n    _this.clearStorage = function () {\n      localStorage.clear(); //return habit circles to neutral for new day\n\n      var stacks = _toConsumableArray(_this.state.stacks);\n\n      stacks.map(function (stack, index) {\n        stacks[index].map(function (habit) {\n          habit.result = \"neutral\";\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.populateStateFromStorage();\n      this.interval = setInterval(function () {\n        return _this2.isNewDay();\n      }, 60000);\n\n      if (this.isNewDay()) {\n        console.log(\"this.isNewDay is true\");\n        this.newDayUpdateStreakCounter();\n        this.resetForNewDay();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //check every minute if it's the same day\n      var context = this;\n      setTimeout(function () {\n        if (context.isNewDay()) {\n          context.resetForNewDay();\n        }\n      }, 1000);\n      return React.createElement(AppStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }), React.createElement(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }), React.createElement(ViewStacks, {\n        stacks: this.state.stacks,\n        stacksInfo: this.state.stacksInfo,\n        day: this.state.date.visualDate,\n        toggleStack: this.toggleStack,\n        logHabit: this.logHabit,\n        onSortEnd: this.onSortEnd,\n        addHabit: this.addHabit,\n        addStack: this.addStack,\n        toggleAddMode: this.toggleAddMode,\n        cancelActiveModules: this.cancelActiveModules,\n        activeStates: this.state.activeStates,\n        nextDay: this.forceNextDay,\n        clearStorage: this.clearStorage,\n        addHabitFormSubmission: this.addHabitFormSubmission,\n        addStackFormSubmission: this.addStackFormSubmission,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }), React.createElement(DebugLog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      }, this.state.debug.text));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/benreimer/Develop/stacks/stacks-v3/src/App.js"],"names":["React","Component","ViewStacks","arrayMove","styled","createGlobalStyle","AppStyled","div","Typography","GlobalStyles","DebugLog","App","state","stacks","stacksInfo","date","lastLoggedDate","visualDate","activeStates","addModeIsActive","addHabitModuleIsActive","addStackModuleIsActive","editModeIsActive","building","stackBeingAddedTo","debug","debugMode","addDay","addCounter","text","textCounter","habitResultHandler","result","habitEasyComplete","itemId","stackId","stack","i","length","logHabit","newStacks","habitToUpdate","updatedResult","shouldUpdateStreakCounter","lastHabitInStack","today","log","setState","stateUpdateComplete","updateLocaLStorage","updateStreakCounter","addHabit","addStack","addHabitFormSubmission","newHabit","newStack","action","cue","push","cancelActiveModules","toggleAddMode","addStackFormSubmission","name","stackName","streak","todayStreakChange","height","finalResult","streakChange","newDayUpdateStreakCounter","console","thereAreNeutralHabits","map","index","toggleStack","id","activeState","onSortEnd","oldIndex","newIndex","collection","newstacks","day","month","isNewDay","fullDate","Date","thisDay","getDate","toString","thisMonth","getMonth","thisYear","getFullYear","resetForNewDay","currentDate","visDate","habit","stackInfo","forceNextDay","newStackInfo","JSON","parse","localStorage","getItem","setItem","stringify","populateStateFromStorage","newDate","newDebug","clearStorage","clear","interval","setInterval","clearInterval","context","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styled, {createGlobalStyle} from 'styled-components';\n\n\n/**************\nTO DO\n\nComponents\n\n- 'Edit' button\n- Error handling (PWA white screen is whenever react has an error. Could I have plain JS outside of react that appears\nletting users know there's an error?)\n- 'Miss' management component\n\n- stack bar color when all complete\n- Add days of the week to habits\n- Learn push messaging and add reminders to habits (or reminders to your stack)\n\n- make the android PWA download pop-up work\n- Refactor stack info into stacks array with helper functions aware of draggablelist lib\n- animation for successes and misses\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nconst AppStyled = styled.div`\n  position:relative;\n  width:100%;\n  height: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n  display: block;\n  padding-top: 100px;\n\n  @media(min-width:769px){\n    .App {\n      margin-top: 40px;\n    }\n  }\n`\nconst Typography = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\n`;\nconst GlobalStyles = createGlobalStyle`\n  h3, h4 {\n    font-family : 'Poppins';\n    font-weight : 700;\n  }\n  body {\n    font-family: 'Roboto';\n    font-weight: 400;\n    height: 100%;\n  }\n  html {\n    font-size: 16px;\n    overflow: scroll;\n    overflow-x: hidden;\n    height: 100%;\n  }\n  ::-webkit-scrollbar {\n    width: 0px;  /* remove scrollbar space */\n    background: transparent;  /* optional: just make scrollbar invisible */\n  }\n  button {\n      display: block;\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\n      border-radius: 4px;\n      height: 30px;\n      // width:85px;\n      padding-top: 4px;\n      padding-left: 13px;\n      padding-right: 13px;\n      font-family: Poppins;\n      font-weight: 500;\n      font-size: 1rem;\n      color: #3D3D3D;\n      text-align: center;\n      transition: width .2s;\n      -webkit-touch-callout: none; /* iOS Safari */\n      -webkit-user-select: none; /* Chrome/Safari/Opera */\n      -khtml-user-select: none; /* Konqueror */\n      -moz-user-select: none; /* Firefox */\n      -ms-user-select: none; /* Internet Explorer/Edge */\n       user-select: none;\n  }\n  button:focus{\n    outline: none;\n  }\n`;\nconst DebugLog = styled.div`\n  position:absolute;\n  width:100%;\n  bottom: 70px;\n  z-index:10;\n  padding-left: 5px;\n`\n\n\nclass App extends Component {\n\n\n\n  state = {\n    stacks : [\n      /*[ //stack 1\n        {\n          action : \"Meditate 15mins\",\n          cue: \"7:00am\",\n          result: \"neutral\",\n          log : {},\n        },\n      ],*/\n    ],\n    stacksInfo : [\n      // { name : \"Routine One\", streak: 0, todayStreakChange:0, height : \"auto\", },\n    ],\n    date : {\n      lastLoggedDate : null, // day/month/year\n      visualDate : null,\n    },\n    activeStates : {\n      addModeIsActive : false,\n      addHabitModuleIsActive : false,\n      addStackModuleIsActive : false,\n      editModeIsActive : false,\n    },\n    building : {\n      stackBeingAddedTo : 0, //defaults to first stack\n    },\n    debug : {\n      debugMode : true,\n      addDay : false,\n      addCounter : 0,\n      text : \" __ \",\n      textCounter : 0,\n    }\n  };\n\n\n  //HABITS AND STACKS\n  habitResultHandler = (result) => {\n    switch (result){\n      case \"neutral\" :\n        return \"complete\";\n      case \"complete\" :\n        return \"miss\";\n      case \"miss\" :\n        return \"skip\";\n      case \"skip\" :\n        return \"neutral\";\n      default :\n        return \"neutral\";\n    }\n  }\n  habitEasyComplete = (itemId, stackId) => {\n    //turn earlier habits in stack into 'complete' if they're neutral\n\n    let stack = [...this.state.stacks[stackId]];\n    for (var i = 0; i < stack.length; i++) {\n      if (itemId > i && stack[i].result === \"neutral\"){\n        this.logHabit(i, stackId)\n      }\n    }\n  }\n\n  /*\n  when a habit is tapped it logHabit()\n  addHabit opens the addHabitModule and begins the process\n  while AddHabitFormSubmission completes the process.\n  */\n  logHabit = (itemId, stackId) => {\n\n    let newStacks = [...this.state.stacks];\n    let habitToUpdate = newStacks[stackId][itemId];\n    let result = habitToUpdate.result; //neutral, complete, miss, etc.\n    let updatedResult = this.habitResultHandler(result); //toggle to next result\n    let shouldUpdateStreakCounter = false;\n\n    if (updatedResult === \"complete\"){\n      this.habitEasyComplete(itemId, stackId);\n    }\n    //if last habit in a stack is logged with any result, update streakcounter\n    let lastHabitInStack = newStacks[stackId].length-1;\n    if (newStacks[stackId][lastHabitInStack].result !== null){\n      shouldUpdateStreakCounter = true;\n    }\n\n    habitToUpdate.result = updatedResult;\n\n    //add habit to the habit's log\n    let today = this.state.date.lastLoggedDate;\n    habitToUpdate.log[today] = updatedResult;\n\n\n    this.setState({stacks : newStacks}, function stateUpdateComplete(){\n      this.updateLocaLStorage();\n      if (shouldUpdateStreakCounter) {\n        this.updateStreakCounter(stackId)\n      };\n    })\n\n  }\n  addHabit = (stackId) => {\n\n    const activeStates = {...this.state.activeStates};\n    const building = {...this.state.building};\n\n    activeStates.addHabitModuleIsActive = true;\n    building.stackBeingAddedTo = stackId;\n\n    this.setState({ activeStates : activeStates });\n    this.setState({ building : building });\n  }\n  addStack = (stackId) => {\n\n    const activeStates = {...this.state.activeStates};\n    const building = {...this.state.building};\n\n    activeStates.addStackModuleIsActive = true;\n    building.stackBeingAddedTo = stackId;\n\n    this.setState({ activeStates : activeStates });\n    this.setState({ building : building });\n  }\n  addHabitFormSubmission = (newHabit) => {\n\n    let stackId = this.state.building.stackBeingAddedTo;\n    let newStack = [...this.state.stacks];\n\n    let action = newHabit.action;\n    let cue = newHabit.cue;\n\n    newStack[stackId].push(\n      {\n        action : action,\n        cue: cue,\n        result: \"neutral\",\n        log : {},\n      }\n    )\n\n    const building = {...this.state.building};\n    building.stackBeingAddedTo = 0; //defaults to first stack\n    this.setState({building : building });\n    this.setState({stacks : newStack})\n    this.updateLocaLStorage();\n\n    this.cancelActiveModules();\n    this.toggleAddMode();\n  }\n  addStackFormSubmission = (newStack) => {\n\n    let stacks = [...this.state.stacks];\n    let stacksInfo = [...this.state.stacksInfo];\n\n    stacksInfo.push(\n      { name : newStack.stackName, streak: 0, todayStreakChange:0, height : \"auto\", },\n    )\n    stacks.push([]);\n\n\n    this.setState({stacksInfo : stacksInfo});\n    this.setState({stacks : stacks});\n\n    this.cancelActiveModules();\n    this.toggleAddMode();\n    this.updateLocaLStorage();\n  }\n\n  //STREAKS\n  updateStreakCounter = (stackId) => {\n    let stacksInfo = [...this.state.stacksInfo];\n    let finalResult = null;\n    let streakChange = stacksInfo[stackId].todayStreakChange;\n    let stack = [...this.state.stacks[stackId]];\n\n    for (var i = 0; i < stack.length; i++) {\n\n      if (stack[i].result === \"complete\" && finalResult !== \"failed\" && finalResult !== \"incomplete\"){\n        finalResult = \"completed\";\n      }\n      else if(stack[i].result === \"miss\"){\n        finalResult = \"failed\";\n      }\n      else if (stack[i].result === \"skip\" && finalResult !== \"failed\" && finalResult !== \"incomplete\"){\n        finalResult = \"completed\";\n      }\n      else if (stack[i].result === \"neutral\"){\n        //catch any neutrals -- this means logging for the day isn't done yet\n        finalResult = \"incomplete\";\n      }\n    }\n\n    if (finalResult === \"failed\"){\n      if (streakChange !== -1){ //only remove 1 if it hasn't already today\n        if(stacksInfo[stackId].streak !== 0){ //don't let it go into negatives when streak is at 0\n          stacksInfo[stackId].streak--;\n          streakChange = -1;\n        }\n      }\n    }\n    if (finalResult === \"completed\"){\n      if (streakChange !== 1){\n        stacksInfo[stackId].streak++;\n        streakChange = 1;\n      }\n    }\n\n    stacksInfo[stackId].todayStreakChange = streakChange;\n    this.setState({stacksInfo : stacksInfo})\n\n\n  }\n  newDayUpdateStreakCounter = () => {\n    //check for any incompletes from yesterday and mark as failed\n    //this should run right before the resetForNewDay() does\n\n    console.log(\"Running newDayUpdateStreakCounter\");\n\n    let stacksInfo = [...this.state.stacksInfo];\n    let stacks = [...this.state.stacks];\n    let thereAreNeutralHabits = false;\n\n    stacks.map( (stack, index) => {\n      for (var i = 0; i < stack.length; i++) {\n        if (stack[i].result === \"neutral\"){\n          //catch any neutrals -- this means logging for the day isn't done yet\n          thereAreNeutralHabits = true;\n          console.log(\"found a neutral habit\");\n        }\n      }\n      if (thereAreNeutralHabits){\n        console.log(\"#1\");\n        if (stacksInfo[index].todayStreakChange !== -1){ //only remove 1 if it hasn't already today\n          console.log(\"#2\");\n          if(stacksInfo[index].streak !== 0){ //don't let it go into negatives when streak is at 0\n            console.log(\"#3\");\n            stacksInfo[index].streak--;\n            stacksInfo[index].todayStreakChange = -1;\n            console.log(\"-1 to streak counter \");\n          }\n        }\n      }\n    })\n\n    this.setState({stacksInfo : stacksInfo})\n\n  }\n\n  //OTHER\n  toggleStack = (id) => {\n    let toggleStack = this.state.stacksInfo[id];\n    let newStack = toggleStack;\n\n    newStack.height = toggleStack.height === 0 ? 'auto' : 0;\n\n    this.setState({\n      toggleStack : newStack\n    })\n  }\n  toggleAddMode = () => {\n    const activeState = this.state.activeStates;\n    activeState.addModeIsActive = !activeState.addModeIsActive;\n    this.setState({ activeState : activeState})\n  }\n  cancelActiveModules = () => {\n    let activeStates = {...this.state.activeStates};\n    activeStates.addHabitModuleIsActive = false;\n    activeStates.addStackModuleIsActive = false;\n    this.setState({activeStates : activeStates});\n  }\n  onSortEnd = ({oldIndex, newIndex, collection}) => {\n    this.setState(({stacks}) => {\n      const newstacks = [...stacks];\n\n      newstacks[collection] = arrayMove(\n        stacks[collection],\n        oldIndex,\n        newIndex,\n      );\n      return {stacks: newstacks};\n    });\n  };\n\n  //DAY-RELATED\n  visualDate = (day, month) => {\n    let today = null;\n\n    switch (month) {\n      case '0' :\n        today = \"Jan \" + day;\n        break;\n      case '1' :\n        today = \"Feb \" + day;\n        break;\n      case '2' :\n        today = \"March \" + day;\n        break;\n      case '3' :\n        today = \"April \" + day;\n        break;\n      case '4' :\n        today = \"May \" + day;\n        break;\n      case '5' :\n        today = \"June \" + day;\n        break;\n      case '6' :\n        today = \"July \" + day;\n        break;\n      case '7' :\n        today = \"Aug \" + day;\n        break;\n      case '8' :\n        today = \"Sept \" + day;\n        break;\n      case '9' :\n        today = \"Oct \" + day;\n        break;\n      case '10' :\n        today = \"Nov \" + day;\n        break;\n      case '11' :\n        today = \"Dec \" + day;\n        break;\n    }\n    return today;\n  }\n  isNewDay = () => {\n    console.log(\"isNewDay()\");\n    let date = {...this.state.date}\n    let lastLoggedDate = date.lastLoggedDate;\n\n    //get the day\n    let fullDate = new Date();\n    let thisDay = fullDate.getDate().toString();\n    let thisMonth = fullDate.getMonth().toString();\n    let thisYear = fullDate.getFullYear().toString();\n\n    //Debug : force add a day for testing\n    if (this.state.debug.debugMode){\n\n      thisDay = fullDate.getDate() + this.state.debug.addCounter;\n      thisDay = thisDay.toString();\n\n      if (this.state.debug.addDay){\n        console.log(\"day is forced to next\");\n        let debug = {...this.state.debug};\n        debug.addCounter++;\n        debug.addDay = false;\n        this.setState({debug : debug})\n        this.newDayUpdateStreakCounter();\n        this.resetForNewDay();\n      }\n    }\n\n\n    let currentDate = thisDay + \"/\" + thisMonth + \"/\" + thisYear;\n    let visDate = this.visualDate(thisDay, thisMonth);\n\n\n    console.log(\"currentDate : \", currentDate);\n    console.log(\"lastLoggedDate : \", lastLoggedDate);\n\n    if (lastLoggedDate === currentDate){\n      return false;\n    }\n    else {\n      date.lastLoggedDate = currentDate;\n      date.visualDate = visDate;\n      this.setState({ date : date})\n      return true;\n    }\n\n  }\n  resetForNewDay = () => {\n\n    console.log(\"resetForNewDay()\");\n    let stacks = [...this.state.stacks];\n\n    for (var i = 0; i < stacks.length; i++) {\n      this.updateStreakCounter(i);\n    }\n\n    stacks.map( (stack, index) => {\n      stacks[index].map( habit => {\n        habit.result = \"neutral\"\n      })\n    });\n\n    let stacksInfo = [...this.state.stacksInfo];\n    stacksInfo.map( stackInfo => {\n      stackInfo.todayStreakChange = 0;\n    });\n\n    this.updateLocaLStorage();\n\n  }\n  forceNextDay = () => {\n    let debug = {...this.state.debug};\n    debug.addDay = true;\n    this.setState({debug : debug})\n  }\n\n\n  //STORAGE\n  updateLocaLStorage = () => {\n      let newStackInfo  = JSON.parse(localStorage.getItem('StacksInfo'));\n      console.log(\"updateLocaLStorage() - stacksinfo\", newStackInfo);\n\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      localStorage.setItem(\"Stacks\", JSON.stringify(this.state.stacks));\n      localStorage.setItem(\"StacksInfo\", JSON.stringify(this.state.stacksInfo));\n      localStorage.setItem(\"Date\", JSON.stringify(this.state.date));\n      localStorage.setItem(\"Debug\", JSON.stringify(this.state.debug));\n\n      let debug = {...this.state.debug};\n      debug.text = \"Local updated at : \" + debug.textCounter;\n      debug.textCounter++;\n\n      this.setState({debug: debug})\n  }\n  populateStateFromStorage = () => {\n    console.log(\"populateStateFromStorage()\");\n    //use localStorage to re-populate state when app is refreshed\n    let newStack = JSON.parse(localStorage.getItem('Stacks'));\n    let newDate = JSON.parse(localStorage.getItem('Date'));\n    let newStackInfo  = JSON.parse(localStorage.getItem('StacksInfo'));\n    let newDebug  = JSON.parse(localStorage.getItem('Debug'));\n\n    if (newStack) {\n      this.setState({ stacks : newStack})\n    }\n    if (newDate) {\n      this.setState({ date : newDate})\n    }\n    if (newStackInfo) {\n      this.setState({ stacksInfo : newStackInfo})\n    }\n    if (newDebug) {\n      this.setState({ debug : newDebug})\n    }\n  }\n  clearStorage = () => {\n    localStorage.clear();\n\n    //return habit circles to neutral for new day\n    let stacks = [...this.state.stacks];\n\n    stacks.map( (stack, index) => {\n      stacks[index].map( habit => {\n        habit.result = \"neutral\"\n      })\n    })\n  }\n\n  componentDidMount() {\n\n    this.populateStateFromStorage();\n    this.interval = setInterval(() => this.isNewDay(), 60000);\n\n    if (this.isNewDay()) {\n      console.log(\"this.isNewDay is true\");\n      this.newDayUpdateStreakCounter();\n      this.resetForNewDay();\n    }\n\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n\n  render() {\n\n    //check every minute if it's the same day\n    let context = this;\n    setTimeout(function () {\n      if (context.isNewDay()){\n        context.resetForNewDay();\n      }\n    }, 1000);\n\n    return (\n      <AppStyled>\n\n        <Typography />\n        <GlobalStyles />\n\n        <ViewStacks\n          stacks={this.state.stacks}\n          stacksInfo={this.state.stacksInfo}\n          day={this.state.date.visualDate}\n          toggleStack={this.toggleStack}\n          logHabit={this.logHabit}\n          onSortEnd={this.onSortEnd}\n          addHabit={this.addHabit}\n          addStack={this.addStack}\n          toggleAddMode={this.toggleAddMode}\n          cancelActiveModules={this.cancelActiveModules}\n          activeStates={this.state.activeStates}\n          nextDay={this.forceNextDay}\n          clearStorage={this.clearStorage}\n          addHabitFormSubmission={this.addHabitFormSubmission}\n          addStackFormSubmission={this.addStackFormSubmission}\n        />\n        <DebugLog>\n        {this.state.debug.text}\n        </DebugLog>\n      </AppStyled>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}