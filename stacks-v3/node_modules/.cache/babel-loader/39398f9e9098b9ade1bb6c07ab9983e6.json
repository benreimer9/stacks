{"ast":null,"code":"import _classCallCheck from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/src/Components/ViewStacks.js\";\nimport React, { Component } from 'react';\nimport Stacks from './Stacks';\n/**************\nHolds the Daily Stacks View\n\n\nTO DO\n\n- 'add' button\n  - add spots where applicable (stacks, habits, friends)\n  - cancel\n\n- display stacks and habits\n\n- display empty stacks component if no stacks\n\n**************/\n\nvar View_Stacks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(View_Stacks, _Component);\n\n  function View_Stacks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, View_Stacks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(View_Stacks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.addHabit = function (itemPos, stackID) {\n      //recognize which was clicked\n      //input module (toggle off touchspots)\n      //submit to right place\n      //console.log(\"item pos is : \" + itemPos + \" and stackID is : \" + stackID);\n      _this.setState({\n        inputtingNewHabit: true\n      }); //but this should only be taken once form is filled out.\n\n\n      var cue = _this.state.newHabit.cue;\n      var action = _this.state.newHabit.action;\n      var newStack = _this.state.stacks;\n      newStack[stackID].stack.habits.splice(itemPos, 0, {\n        cue: cue,\n        action: action,\n        result: \"blank\",\n        fn: \"\"\n      });\n\n      _this.setState({\n        stacks: newStack\n      }); // this.cancelNew();\n\n    };\n\n    _this.logHabits = function (itemPos, stackID) {\n      var h = _this.state.stacks[stackID].stack.habits;\n      var newH = h.map(function (habit, i) {\n        if (i <= itemPos) {\n          habit.result = \"success\";\n        } else {\n          habit.result = \"failure\";\n        }\n      });\n\n      if (itemPos === h.length - 1) {\n        console.log(\"SUCCESS\");\n      }\n\n      _this.setState({\n        h: newH\n      });\n    };\n\n    _this.displayStacks = function (stacks) {\n      if (stacks.length !== 0) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \" yup there's stuff \");\n      } else {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Tap + to add stacks, habits, & friends\");\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(View_Stacks, [{\n    key: \"render\",\n    value: function render() {\n      /**************\n      Logic\n       - Check if there are any stacks available in state\n        - no? emptyStacks message\n        - yes? display\n       **************/\n      var stacksToDisplay = this.displayStacks(this.props.stacks);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, stacksToDisplay);\n    }\n  }]);\n\n  return View_Stacks;\n}(Component);\n\nexport default View_Stacks;","map":{"version":3,"sources":["/Users/benreimer/Google Drive/Year4Sem2/IXDS2/stacks-v2/src/Components/ViewStacks.js"],"names":["React","Component","Stacks","View_Stacks","addHabit","itemPos","stackID","setState","inputtingNewHabit","cue","state","newHabit","action","newStack","stacks","stack","habits","splice","result","fn","logHabits","h","newH","map","habit","i","length","console","log","displayStacks","stacksToDisplay","props"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;;;;;;;;;;;;;;;;IAiBMC,W;;;;;;;;;;;;;;;;;;UAMJC,Q,GAAW,UAACC,OAAD,EAAUC,OAAV,EAAsB;AAC/B;AACA;AACA;AAEA;AAEA,YAAKC,QAAL,CAAc;AAACC,QAAAA,iBAAiB,EAAC;AAAnB,OAAd,EAP+B,CAU/B;;;AAEA,UAAIC,GAAG,GAAG,MAAKC,KAAL,CAAWC,QAAX,CAAoBF,GAA9B;AACA,UAAIG,MAAM,GAAG,MAAKF,KAAL,CAAWC,QAAX,CAAoBC,MAAjC;AAIA,UAAIC,QAAQ,GAAG,MAAKH,KAAL,CAAWI,MAA1B;AACAD,MAAAA,QAAQ,CAACP,OAAD,CAAR,CAAkBS,KAAlB,CAAwBC,MAAxB,CAA+BC,MAA/B,CAAsCZ,OAAtC,EAA+C,CAA/C,EAAkD;AAACI,QAAAA,GAAG,EAACA,GAAL;AAAUG,QAAAA,MAAM,EAACA,MAAjB;AAAyBM,QAAAA,MAAM,EAAC,OAAhC;AAAyCC,QAAAA,EAAE,EAAC;AAA5C,OAAlD;;AACA,YAAKZ,QAAL,CAAc;AAACO,QAAAA,MAAM,EAAGD;AAAV,OAAd,EAnB+B,CAoB/B;;AACD,K;;UACDO,S,GAAY,UAACf,OAAD,EAAUC,OAAV,EAAsB;AAEhC,UAAIe,CAAC,GAAG,MAAKX,KAAL,CAAWI,MAAX,CAAkBR,OAAlB,EAA2BS,KAA3B,CAAiCC,MAAzC;AAEA,UAAIM,IAAI,GAAGD,CAAC,CAACE,GAAF,CAAM,UAACC,KAAD,EAAQC,CAAR,EAAc;AAC7B,YAAIA,CAAC,IAAIpB,OAAT,EAAiB;AACfmB,UAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACD,SAFD,MAGK;AACHM,UAAAA,KAAK,CAACN,MAAN,GAAc,SAAd;AACD;AACF,OAPU,CAAX;;AASA,UAAIb,OAAO,KAAKgB,CAAC,CAACK,MAAF,GAAS,CAAzB,EAA2B;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;;AAED,YAAKrB,QAAL,CAAc;AAACc,QAAAA,CAAC,EAACC;AAAH,OAAd;AAED,K;;UAGDO,a,GAAgB,UAACf,MAAD,EAAY;AAE1B,UAAIA,MAAM,CAACY,MAAP,KAAkB,CAAtB,EAAyB;AACvB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD,OAFD,MAGK;AACH,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAP;AACD;AACF,K;;;;;;;6BAEQ;AAEP;;;;;;AASA,UAAII,eAAe,GAAG,KAAKD,aAAL,CAAmB,KAAKE,KAAL,CAAWjB,MAA9B,CAAtB;AAGA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGgB,eADH,CADF;AAKD;;;;EA/EuB7B,S;;AAoF1B,eAAeE,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport Stacks from './Stacks';\n\n/**************\nHolds the Daily Stacks View\n\n\nTO DO\n\n- 'add' button\n  - add spots where applicable (stacks, habits, friends)\n  - cancel\n\n- display stacks and habits\n\n- display empty stacks component if no stacks\n\n**************/\n\n\nclass View_Stacks extends Component {\n\n\n\n\n  //to draw from :\n  addHabit = (itemPos, stackID) => {\n    //recognize which was clicked\n    //input module (toggle off touchspots)\n    //submit to right place\n\n    //console.log(\"item pos is : \" + itemPos + \" and stackID is : \" + stackID);\n\n    this.setState({inputtingNewHabit:true});\n\n\n    //but this should only be taken once form is filled out.\n\n    let cue = this.state.newHabit.cue;\n    let action = this.state.newHabit.action;\n\n\n\n    let newStack = this.state.stacks;\n    newStack[stackID].stack.habits.splice(itemPos, 0, {cue:cue, action:action, result:\"blank\", fn:\"\"});\n    this.setState({stacks : newStack});\n    // this.cancelNew();\n  }\n  logHabits = (itemPos, stackID) => {\n\n    let h = this.state.stacks[stackID].stack.habits;\n\n    let newH = h.map((habit, i) => {\n      if (i <= itemPos){\n        habit.result = \"success\";\n      }\n      else {\n        habit.result =\"failure\";\n      }\n    });\n\n    if (itemPos === h.length-1){\n      console.log(\"SUCCESS\");\n    }\n\n    this.setState({h:newH});\n\n  }\n\n\n  displayStacks = (stacks) => {\n\n    if (stacks.length !== 0) {\n      return <p> yup there's stuff </p>\n    }\n    else {\n      return <p>Tap + to add stacks, habits, & friends</p>\n    }\n  }\n\n  render() {\n\n    /**************\n    Logic\n\n    - Check if there are any stacks available in state\n      - no? emptyStacks message\n      - yes? display\n\n    **************/\n\n    let stacksToDisplay = this.displayStacks(this.props.stacks);\n\n\n    return (\n      <div>\n        {stacksToDisplay}\n      </div>\n    );\n  }\n}\n\n\n\nexport default View_Stacks;\n"]},"metadata":{},"sourceType":"module"}