{"ast":null,"code":"import _toConsumableArray from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/benreimer/Develop/stacks/stacks-v3/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/benreimer/Develop/stacks/stacks-v3/src/App.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  h3, h4 {\\n    font-family : 'Poppins';\\n    font-weight : 700;\\n  }\\n  body {\\n    font-family: 'Roboto';\\n    font-weight: 400;\\n  }\\n  html {\\n    font-size: 16px;\\n    overflow: scroll;\\n    overflow-x: hidden;\\n  }\\n  ::-webkit-scrollbar {\\n    width: 0px;  /* remove scrollbar space */\\n    background: transparent;  /* optional: just make scrollbar invisible */\\n  }\\n  button {\\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\\n      border-radius: 6px;\\n      height: 40px;\\n      width:85px;\\n      padding-top: 5px;\\n      font-family: Poppins;\\n      font-weight: 500;\\n      font-size: 1.25rem;\\n      color: #3D3D3D;\\n      text-align: center;\\n  }\\n  button:focus{\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position:relative;\\n  overflow:hidden;\\n  width:100%;\\n  max-width: 500px;\\n  margin: 0 auto;\\n  display: block;\\n  padding-top: 100px;\\n\\n  @media(min-width:769px){\\n    .App {\\n      margin-top: 40px;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styled, { createGlobalStyle } from 'styled-components';\n/**************\nTO DO\n\n\n!- See if you can refactor state so stack info is in the same overall item as stacks.\nMaybe adding in an extra layer of array for sortable lib is all that is needed?\n\n\n- Ability to Add a new stack\n- Ability to rearrange stacks\n- Add new habits\n- toggle animation\n- stack bar color when all complete\n- Streak counter 'working'\n- 'Edit' button\n\n\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nvar AppStyled = styled.div(_templateObject());\nvar Typography = createGlobalStyle(_templateObject2());\nvar GlobalStyles = createGlobalStyle(_templateObject3());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      stacks: [[{\n        action: \"Meditate 15mins\",\n        cue: \"7:00am\",\n        result: \"neutral\",\n        log: [\"complete\"]\n      }, {\n        action: \"Exercise\",\n        cue: \"then\",\n        result: \"neutral\",\n        log: [\"complete\"]\n      }]],\n      stacksInfo: [{\n        name: \"Routine One\",\n        streak: 0,\n        height: \"auto\"\n      }],\n      lastLoggedDate: null,\n      lastLoggedMonth: null,\n      dayOfHabit: 0,\n      activeStates: {\n        addModeIsActive: false,\n        addModuleIsActive: false,\n        editModeIsActive: false\n      },\n      storedHabit: \"null\"\n    };\n\n    _this.toggleStack = function (id) {\n      var oldStack = _this.state.stacksInfo[id];\n      var newStack = oldStack;\n      newStack.height = oldStack.height === 0 ? 'auto' : 0;\n\n      _this.setState({\n        oldStack: newStack\n      });\n    };\n\n    _this.habitResultHandler = function (result) {\n      switch (result) {\n        case \"neutral\":\n          return \"complete\";\n\n        case \"complete\":\n          return \"miss\";\n\n        case \"miss\":\n          return \"skip\";\n\n        case \"skip\":\n          return \"neutral\";\n\n        default:\n          return \"neutral\";\n      }\n    };\n\n    _this.habitEasyComplete = function (itemId, stackId) {\n      //turn earlier habits in stack into 'complete' if they're neutral\n      var oldStack = _this.state.stacks;\n      var newStack = Object.assign({}, oldStack);\n      newStack[stackId] = newStack[stackId].map(function (habit, i) {\n        if (itemId > i && habit.result === \"neutral\") {\n          return habit.result = \"complete\";\n        }\n\n        return;\n      });\n\n      _this.setState({\n        oldStack: newStack\n      });\n    };\n\n    _this.logHabit = function (itemId, stackId) {\n      var oldStack = _this.state.stacks;\n      var newStack = Object.assign({}, oldStack);\n      var result = newStack[stackId][itemId].result;\n\n      var updatedResult = _this.habitResultHandler(result); //toggle through results\n\n\n      if (updatedResult === \"complete\") {\n        //see if the easy complete is used\n        _this.habitEasyComplete(itemId, stackId);\n      }\n\n      newStack[stackId][itemId].result = updatedResult;\n      localStorage.setItem(\"Habit\", updatedResult); //add to habit log\n\n      var log = newStack[stackId][itemId].log;\n      log[_this.state.dayOfHabit] = updatedResult;\n      newStack[stackId][itemId].log = log;\n      console.log(\"log is \", log);\n\n      _this.setState({\n        oldStack: newStack\n      });\n    };\n\n    _this.onSortEnd = function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex,\n          collection = _ref.collection;\n\n      _this.setState(function (_ref2) {\n        var stacks = _ref2.stacks;\n\n        var newstacks = _toConsumableArray(stacks);\n\n        newstacks[collection] = arrayMove(stacks[collection], oldIndex, newIndex);\n        return {\n          stacks: newstacks\n        };\n      });\n    };\n\n    _this.addHabit = function (stackId) {\n      var oldStack = _this.state.stacks;\n      var newStack = Object.assign({}, oldStack);\n      var activeStates = _this.state.activeStates;\n      var newActiveStates = activeStates;\n      newActiveStates.addModuleIsActive = true;\n\n      _this.setState({\n        activeStates: newActiveStates\n      });\n\n      var cue = prompt(\"Cue : \");\n      var action = prompt(\"Action : \");\n      newStack[stackId].push({\n        action: action,\n        cue: cue,\n        result: \"neutral\",\n        log: []\n      });\n\n      _this.setState({\n        oldStack: newStack\n      });\n    };\n\n    _this.toggleAddMode = function () {\n      var activeState = _this.state.activeStates;\n      var newActiveState = activeState;\n      newActiveState.addModeIsActive = !activeState.addModeIsActive;\n\n      _this.setState({\n        activeState: newActiveState\n      });\n    };\n\n    _this.checkIsSameDay = function (thisDay, thisMonth) {\n      if (thisDay !== _this.state.lastLoggedDate && thisMonth !== _this.state.lastLoggedMonth) {\n        console.log(\"it's a new day!\");\n        return false;\n      } else if (thisDay === _this.state.lastLoggedDate && thisMonth === _this.state.lastLoggedMonth) {\n        console.log(\"same day\");\n        return true;\n      }\n    };\n\n    _this.updateDate = function (thisDay, thisMonth) {\n      var dayOfHabit = _this.state.dayOfHabit;\n      var nextDayOfHabit = dayOfHabit + 1;\n\n      _this.setState({\n        lastLoggedDate: thisDay\n      });\n\n      _this.setState({\n        lastLoggedMonth: thisMonth\n      });\n\n      _this.setState({\n        dayOfHabit: nextDayOfHabit\n      });\n    };\n\n    _this.updateLocaLStorage = function () {//should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n    };\n\n    _this.populateStateFromStorage = function () {\n      //use localStorage to re-populate state when app is refreshed\n      var newStore = localStorage.getItem('Habits');\n\n      _this.setState({\n        storedHabit: newStore\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fullDate = new Date();\n      var thisDay = fullDate.getDate();\n      var thisMonth = fullDate.getMonth();\n      var res = this.checkIsSameDay(thisDay, thisMonth); //populate storedHabit in state from localStorage from previous sessions\n\n      populateStateFromStorage();\n\n      if (!res) {\n        this.updateDate(thisDay, thisMonth);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var store = this.state.storedHabit;\n      return React.createElement(AppStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }), React.createElement(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, store), React.createElement(ViewStacks, {\n        stacks: this.state,\n        stacksInfo: this.state.stacksInfo,\n        day: this.state.dayOfHabit,\n        toggleStack: this.toggleStack,\n        logHabit: this.logHabit,\n        onSortEnd: this.onSortEnd,\n        addHabit: this.addHabit,\n        toggleAddMode: this.toggleAddMode,\n        activeStates: this.state.activeStates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/benreimer/Develop/stacks/stacks-v3/src/App.js"],"names":["React","Component","ViewStacks","arrayMove","styled","createGlobalStyle","AppStyled","div","Typography","GlobalStyles","App","state","stacks","action","cue","result","log","stacksInfo","name","streak","height","lastLoggedDate","lastLoggedMonth","dayOfHabit","activeStates","addModeIsActive","addModuleIsActive","editModeIsActive","storedHabit","toggleStack","id","oldStack","newStack","setState","habitResultHandler","habitEasyComplete","itemId","stackId","Object","assign","map","habit","i","logHabit","updatedResult","localStorage","setItem","console","onSortEnd","oldIndex","newIndex","collection","newstacks","addHabit","newActiveStates","prompt","push","toggleAddMode","activeState","newActiveState","checkIsSameDay","thisDay","thisMonth","updateDate","nextDayOfHabit","updateLocaLStorage","populateStateFromStorage","newStore","getItem","fullDate","Date","getDate","getMonth","res","store"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ViewStacks from './Components/ViewStacks';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styled, {createGlobalStyle} from 'styled-components';\n\n/**************\nTO DO\n\n\n!- See if you can refactor state so stack info is in the same overall item as stacks.\nMaybe adding in an extra layer of array for sortable lib is all that is needed?\n\n\n- Ability to Add a new stack\n- Ability to rearrange stacks\n- Add new habits\n- toggle animation\n- stack bar color when all complete\n- Streak counter 'working'\n- 'Edit' button\n\n\n- remove unneeded fonts when style is done\n\nNote:\narray of habits (stacks[]) is separate from array of stack info (stacksInfo[])\ndue to how Sortable library works with arrys not objects. Unless I go into their\nlibrary and make some changes I'm stuck with this setup I believe.\nThis is technical debt that may hurt later.\nhttps://github.com/clauderic/react-sortable-hoc\n\nNote:\nNever figured out importing local font files. Might have something to do with needing\nto add a loader to webpack\n\n**************/\n\nconst AppStyled = styled.div`\n  position:relative;\n  overflow:hidden;\n  width:100%;\n  max-width: 500px;\n  margin: 0 auto;\n  display: block;\n  padding-top: 100px;\n\n  @media(min-width:769px){\n    .App {\n      margin-top: 40px;\n    }\n  }\n`\nconst Typography = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Poppins:500,700');\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300i,400,500');\n`;\nconst GlobalStyles = createGlobalStyle`\n  h3, h4 {\n    font-family : 'Poppins';\n    font-weight : 700;\n  }\n  body {\n    font-family: 'Roboto';\n    font-weight: 400;\n  }\n  html {\n    font-size: 16px;\n    overflow: scroll;\n    overflow-x: hidden;\n  }\n  ::-webkit-scrollbar {\n    width: 0px;  /* remove scrollbar space */\n    background: transparent;  /* optional: just make scrollbar invisible */\n  }\n  button {\n      padding: 0; border: none; font: inherit; color: inherit; background-color: transparent;\n      border-radius: 6px;\n      height: 40px;\n      width:85px;\n      padding-top: 5px;\n      font-family: Poppins;\n      font-weight: 500;\n      font-size: 1.25rem;\n      color: #3D3D3D;\n      text-align: center;\n  }\n  button:focus{\n    outline: none;\n  }\n`;\n\n\n\nclass App extends Component {\n\n\n\n  state = {\n    stacks : [\n      [\n        {\n          action : \"Meditate 15mins\",\n          cue: \"7:00am\",\n          result: \"neutral\",\n          log : [\"complete\"],\n        },\n        {\n          action:\"Exercise\",\n          cue:\"then\",\n          result: \"neutral\",\n          log : [\"complete\"],\n        },\n      ],\n    ],\n    stacksInfo : [\n      { name : \"Routine One\", streak: 0, height : \"auto\", },\n    ],\n    lastLoggedDate : null,\n    lastLoggedMonth : null,\n    dayOfHabit : 0,\n    activeStates : {\n      addModeIsActive : false,\n      addModuleIsActive : false,\n      editModeIsActive : false,\n    },\n    storedHabit : \"null\"\n  };\n\n\n\n  toggleStack = (id) => {\n\n    let oldStack = this.state.stacksInfo[id];\n    let newStack = oldStack;\n\n    newStack.height = oldStack.height === 0 ? 'auto' : 0;\n\n    this.setState({\n      oldStack : newStack\n    })\n  }\n\n  //HABITS\n  habitResultHandler = (result) => {\n    switch (result){\n      case \"neutral\" :\n        return \"complete\";\n      case \"complete\" :\n        return \"miss\";\n      case \"miss\" :\n        return \"skip\";\n      case \"skip\" :\n        return \"neutral\";\n      default :\n        return \"neutral\";\n    }\n  }\n  habitEasyComplete = (itemId, stackId) => {\n    //turn earlier habits in stack into 'complete' if they're neutral\n\n    const oldStack = this.state.stacks;\n    const newStack = Object.assign({}, oldStack);\n\n    newStack[stackId] = newStack[stackId].map( (habit, i) => {\n      if (itemId > i && habit.result ===\"neutral\"){\n        return habit.result = \"complete\";\n      }\n      return\n    });\n\n    this.setState({oldStack : newStack})\n  }\n  logHabit = (itemId, stackId) => {\n\n    const oldStack = this.state.stacks;\n    const newStack = Object.assign({}, oldStack);\n\n    const result = newStack[stackId][itemId].result;\n    const updatedResult = this.habitResultHandler(result); //toggle through results\n\n    if (updatedResult === \"complete\"){\n      //see if the easy complete is used\n      this.habitEasyComplete(itemId, stackId);\n    }\n\n    newStack[stackId][itemId].result = updatedResult;\n\n    localStorage.setItem(\"Habit\", updatedResult);\n\n    //add to habit log\n    const log = newStack[stackId][itemId].log;\n    log[this.state.dayOfHabit] = updatedResult;\n    newStack[stackId][itemId].log = log;\n    console.log(\"log is \", log);\n\n    this.setState({oldStack : newStack})\n\n  }\n  onSortEnd = ({oldIndex, newIndex, collection}) => {\n    this.setState(({stacks}) => {\n      const newstacks = [...stacks];\n\n      newstacks[collection] = arrayMove(\n        stacks[collection],\n        oldIndex,\n        newIndex,\n      );\n      return {stacks: newstacks};\n    });\n  };\n  addHabit = (stackId) => {\n\n    const oldStack = this.state.stacks;\n    const newStack = Object.assign({}, oldStack);\n\n    const activeStates = this.state.activeStates;\n    const newActiveStates = activeStates;\n\n    newActiveStates.addModuleIsActive = true;\n    this.setState({ activeStates : newActiveStates })\n\n    let cue = prompt(\"Cue : \");\n    let action = prompt(\"Action : \");\n    newStack[stackId].push(\n      {\n        action : action,\n        cue: cue,\n        result: \"neutral\",\n        log : [],\n      }\n    )\n\n    this.setState({oldStack : newStack})\n  }\n\n  //OTHER\n  toggleAddMode = () => {\n    const activeState = this.state.activeStates;\n    const newActiveState = activeState;\n    newActiveState.addModeIsActive = !activeState.addModeIsActive;\n    this.setState({ activeState : newActiveState})\n  }\n  checkIsSameDay = (thisDay, thisMonth) => {\n    if (thisDay !== this.state.lastLoggedDate && thisMonth !== this.state.lastLoggedMonth){\n      console.log(\"it's a new day!\");\n      return false;\n    }\n    else if (thisDay === this.state.lastLoggedDate && thisMonth === this.state.lastLoggedMonth){\n      console.log(\"same day\");\n      return true;\n    }\n  }\n  updateDate = (thisDay, thisMonth) => {\n\n    let dayOfHabit = this.state.dayOfHabit;\n    let nextDayOfHabit = dayOfHabit + 1;\n\n    this.setState({lastLoggedDate : thisDay});\n    this.setState({lastLoggedMonth : thisMonth});\n    this.setState({dayOfHabit : nextDayOfHabit});\n  }\n\n  //STORAGE\n  updateLocaLStorage = () => {\n      //should be called whenever a habit is logged asap, in case the users\n      //then immediately close the app\n      \n  }\n  populateStateFromStorage = () => {\n    //use localStorage to re-populate state when app is refreshed\n    let newStore = localStorage.getItem('Habits');\n    this.setState({ storedHabit : newStore})\n\n  }\n\n\n  componentDidMount() {\n\n    let fullDate = new Date();\n    let thisDay = fullDate.getDate();\n    let thisMonth = fullDate.getMonth();\n    let res = this.checkIsSameDay(thisDay, thisMonth);\n\n    //populate storedHabit in state from localStorage from previous sessions\n    populateStateFromStorage();\n\n    if (!res){\n      this.updateDate(thisDay, thisMonth);\n    }\n  }\n\n\n\n\n  render() {\n\n    let store = this.state.storedHabit;\n\n    return (\n      <AppStyled>\n\n        <Typography />\n        <GlobalStyles />\n\n        <h1>{store}</h1>\n        <ViewStacks\n          stacks={this.state}\n          stacksInfo={this.state.stacksInfo}\n          day={this.state.dayOfHabit}\n          toggleStack={this.toggleStack}\n          logHabit={this.logHabit}\n          onSortEnd={this.onSortEnd}\n          addHabit={this.addHabit}\n          toggleAddMode={this.toggleAddMode}\n          activeStates={this.state.activeStates}\n        />\n\n      </AppStyled>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}